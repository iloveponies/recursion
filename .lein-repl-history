(defn my-filter [pred? a-seq]
  (if (empty? a-seq)
  a-seq
  (if (pred? (first a-seq))
  (cons (first a-seq)
    (my-filter (rest a-seq)))
  (my-filter (rest a-seq)))))
(my-filter pos? [-1 0 1])
(my-filter pos [-1 0 1])
(my-filter pos? [-1 0 1])
(my-filter pos? '(-1 0 1))
(my-filter odd? [1, 2, 3, 4])
quit
(defn my-take-while [pred? a-seq]
  (cond
  (empty? a-seq)
  a-seq
  (pred? (first a-seq))
  (cons (first a-seq)
    (my-take-while pred? (rest a-seq)))
  :else
  (my-take-while pred? '())))
(my-take-while odd? (1, 2, 3, 4))
(my-take-while odd? '(1, 2, 3, 4))
exit
(defn power [n k]
  (if (zero? k)
  1
  (n * (power n (dec k)))))
(power 4 1)
quit
  (if (not (pred? (first a-seq)))
  a-seq
  (my-drop-while pred? (rest a-seq))))
(defn my-drop-while [pred? a-seq]
  (if (not (pred? (first a-seq)))
  a-seq
  (my-drop-while pred? (rest a-seq))))
(my-drop-while pos? [1, 2, 3, 4])
(my-drop-while pos? [-1])
(my-drop-while pos? [-1 1])
(my-drop-while pos? [1 -1 1])
(my-drop-while pos? '(1 -1 1))
(defn my-repeat [n k] ;;how-many-times what-to-repeat
  (if (== n 0)
  '()
  (cons) k (my my-repeat (dec n) k)))
(defn my-repeat [n k] ;;how-many-times what-to-repeat
  (if (== n 0)
  '()
  (cons k (my my-repeat (dec n) k))))
>(defn my-repeat [n k] ;;how-many-times what-to-repeat
  (if (== n 0)
  '()
  (cons k (my-repeat (dec n) k))))(defn my-repeat [n k] ;;how-many-times what-to-repeat
  (if (== n 0)
  '()
(my-repeat 1 1)
)))))
(defn my-repeat [n k] ;;how-many-times what-to-repeat
  (if (== n 0)
  '()
  (cons k (my-repeat (dec n) k))))
(my repeat 1 1)
(my-repeat 1 1)
(my-repeat 2 "fak")
quit
(defn my-repeat [n k] ;;how-many-times what-to-repeat
  (if (zero? n)
  '()
  (cons k (my-repeat (dec n) k))))
(my-repeat 2 3)
(my-repeat 2 haha)
(my-repeat 2 "haha")
quit
 ;;how-many-times what-to-repeat
  (if (zero? n)
  '()
)
(defn my-repeat [n k] ;;how-many-times what-to-repeat
  (if (zero? n)
  '()
  (cons k (my-repeat (dec n) k))))
(my-repeat 2 :a)
(my-repeat 3 "lol")
(my-repeat 0 "lol")
(my-repeat 0 )
quit
(lein repl)
(defn my-repeat [how-many-times what-to-repeat] ;;how-many-times what-to-repeat
  (if (zero? how-many-times)
  '()
  (cons what-to-repeat (my-repeat (dec how-many-times) what-to-repeat))))
(my-repeat -1 :a)
quit
(defn my-range [up-to]
  (if (>= 0 up-to)
  '()
  (cons (dec up-to) (my-range (dec up-to)))))
(my-range 5)
quit
(defn tails [a-seq]
  (if (<= (count a-seq) 0)
  []
  (cons a-seq (tails (rest a-seq)))))
(tails '(1 2 3))
(tails '(1 2 3 4 5 6 ))
(defn tails [a-seq]
  (if (<= (count a-seq) 0)
  '()
  (cons a-seq (tails (rest a-seq)))))
(tails '(1 2 3))
(defn inits [a-seq]
(let [b-seq (reverse a-seq)])
  (if (<= (count b-seq) 0)
  '()
  (cons b-seq (inits (rest b-seq)))))
(defn inits [a-seq]
(let [b-seq (reverse a-seq)]
  (if (<= (count b-seq) 0)
  '()
  (cons b-seq (inits (rest b-seq))))))
(inits '(1 2 3 4 5))
(def x '(1 2 3 4))
x
(concat (rest x) (first x))
(apply concat '((rest x) (first x)))
(rest x)
(first x)
(cons (rest x) (first x))
(conj (rest x) (first x))
(conj (first x) (rest x))
(cons (first x) (rest x))
(concat (first x) (rest x))
(concat (rest x) (first x))
(conj (rest x) (first x))
(concat (rest x) (rest x))
(concat (first x) (rest x))
(concat (rest x) (first x))
(concat (rest x) x)
(concat (rest x) '((first x)))
(defn tails [a-seq]
  (if (<= (count a-seq) 0)
  '()
  (cons a-seq (tails (rest a-seq)))))
(tails '(1 2 3))
(defn tails [a-seq]
  (if (= (count a-seq) 0)
  '()
  (cons a-seq (tails (rest a-seq)))))
(tails '(1 2 3))
(defn inits [a-seq]
(tails (reverse a-seq)))
(inits '(1 2 3))
(defn my-tails [a-seq]
  (if (= (count a-seq) 0)
  '()
  (cons a-seq (tails (rest a-seq)))))
(defn tails [a-seq]
  (cons '() (my-tails a-seq)))
(tails '(1 2 3))
(my-tails '(1 2 3))
(defn tails [a-seq]
  (if (= (count a-seq) 0)
  '()
  (cons a-seq (tails (rest a-seq)))))
(tails '(1 2 3))
(my-tails '(1 2 3))
(defn tails [a-seq]
  (cons '() (my-tails a-seq)))
(tails '(1 2 3))
(my-tails '(1 2 3))
(defn my-tails [a-seq]
  (if (= (count a-seq) 0)
  '()
  (cons a-seq (my-tails (rest a-seq)))))
(my-tails '(1 2 3))
(tails '(1 2 3))
(inits '(1 2 3))
quit
(def jono '(1 2 3))
jono
(concat (rest jono) (first jono))
(concat '(1 2) '(3 4))
(concat '(1 2) 1)
(concat (rest jono) '((first jono)))
(first jono)
(concat (rest jono) '(first jono))
(def eka (first jono))
eka
(concat (rest jono) '(1))
(concat (rest jono) '(eka))
(concat (first jono) '(eka))
(cons (first jono) '(eka))
(cons (first jono) (rest jono))
(concat (rest jono) '(first jono))
(concat (rest jono) '(1))
(concat (rest jono) '(eka))
(concat (rest jono) 1)
(concat (rest jono) '(1))
(def eka 1)
(concat (rest jono) '(eka))
(def eka '(1))
(concat (rest jono) eka)
(def eka '(first jono))
eka
(def eka first jono)
(vector (1 2) (3 4))
(vector ((1 2) (3 4)))
(vector '(1 2) '(3 4))
quit
(defn seq-merge [a-seq b-seq] ;;Pysähtyy, kun toinen listoista loppuu kesken???
  (cond 
  (and (empty? a-seq) (empty b-seq)) '()
  (empty? b-seq) (cons (first a-seq) (seq-merge (rest a-seq) '()))
  (empty? a-seq) (cons (first b-seq) (seq-merge '() (rest b-seq)))
  (< (first a-seq) (first b-seq)) (cons (first a-seq) (seq-merge (rest a-seq) b-seq))
  :else (cons (first b-seq) (seq-merge a-seq (rest b-seq)))))
(seq-merge '(1 2 3) '(4 5 6))
(seq-merge '(1 3 5) '(2 4 6))
(defn seq-merge [a-seq b-seq] ;;Pysähtyy, kun toinen listoista loppuu kesken???
  (cond 
  (and (empty? a-seq) (empty b-seq)) '()
  ;;(empty? b-seq) (cons (first a-seq) (seq-merge (rest a-seq) '()))
  ;;(empty? a-seq) (cons (first b-seq) (seq-merge '() (rest b-seq)))
  (< (first a-seq) (first b-seq)) (cons (first a-seq) (seq-merge (rest a-seq) b-seq))
  :else (cons (first b-seq) (seq-merge a-seq (rest b-seq)))))
(seq-merge '(1 3 5) '(2 4 6))
(seq-merge '(1 2 3) '(4 5 6))
(defn seq-merge [a-seq b-seq] ;;Pysähtyy, kun toinen listoista loppuu kesken???
  (cond 
  (and (empty? a-seq) (empty b-seq)) '()
  ;;(empty? b-seq) (cons (first a-seq) (seq-merge (rest a-seq) '()))
  ;;(empty? a-seq) (cons (first b-seq) (seq-merge '() (rest b-seq)))
  (< (first a-seq) (first b-seq)) (cons (first a-seq) (seq-merge (rest a-seq) b-seq))
  :else (cons (first b-seq) (seq-merge a-seq (rest b-seq)))))
(seq-merge '(1 2 3) '())
(defn seq-merge [a-seq b-seq] ;;Pysähtyy, kun toinen listoista loppuu kesken???
  (cond 
  (and (empty? a-seq) (empty b-seq)) '()
  (empty? b-seq) (cons (first a-seq) (seq-merge (rest a-seq) '()))
  (empty? a-seq) (cons (first b-seq) (seq-merge '() (rest b-seq)))
  (< (first a-seq) (first b-seq)) (cons (first a-seq) (seq-merge (rest a-seq) b-seq))
  :else (cons (first b-seq) (seq-merge a-seq (rest b-seq)))))
(seq-merge '(1 2 3) '())
(seq-merge '(1 2 3) '(4 5 6))
(seq-merge '() '(4 5 6))
(seq-merge '(7 8 9) '(4 5 6))
(defn seq-merge [a-seq b-seq] ;;Pysähtyy, kun toinen listoista loppuu kesken???
  (cond 
  (and (empty? a-seq) (empty b-seq)) '()
  (empty? b-seq) (cons (first a-seq) (seq-merge (rest a-seq) '()))
  (empty? a-seq) (cons (first b-seq) (seq-merge (rest b-seq) '()))
  (< (first a-seq) (first b-seq)) (cons (first a-seq) (seq-merge (rest a-seq) b-seq))
  :else (cons (first b-seq) (seq-merge a-seq (rest b-seq)))))
(seq-merge '(7 8 9) '(4 5 6))
(seq-merge '(1 2 3) '(4 5 6))
(defn seq-merge [a-seq b-seq] ;;Pysähtyy, kun toinen listoista loppuu kesken???
  (cond 
  (and (empty? a-seq) (empty? b-seq)) '()
  (empty? b-seq) (cons (first a-seq) (seq-merge (rest a-seq) '()))
  (empty? a-seq) (cons (first b-seq) (seq-merge '() (rest b-seq)))
  (< (first a-seq) (first b-seq)) (cons (first a-seq) (seq-merge (rest a-seq) b-seq))
  :else (cons (first b-seq) (seq-merge a-seq (rest b-seq)))))
(seq-merge '(1 2 3) '(4 5 6))
quit
(defn halve [a-seq]
  (let [puolet (int (/ (count a-seq) 2))]
  (vector (my-take puolet a-seq) (my-drop puolet a-seq))))
(defn my-take [n coll]
  (if (or (zero? n) (empty? coll))
  '()
  (cons 
  (first coll)
  (my-take (- n 1) (rest coll)))))
(defn my-drop [n coll]
  (if (zero? n)
  coll
  (my-drop (dec n) (rest coll))))
(defn halve [a-seq]
  (let [puolet (int (/ (count a-seq) 2))]
  (vector (my-take puolet a-seq) (my-drop puolet a-seq))))
(def a-seq '(2 4 1 3))
(halve a-seq)
(defn seq-merge [a-seq b-seq] ;;Pysähtyy, kun toinen listoista loppuu kesken???
  (cond 
  (and (empty? a-seq) (empty? b-seq)) '()
  (empty? b-seq) (cons (first a-seq) (seq-merge (rest a-seq) '()))
  (empty? a-seq) (cons (first b-seq) (seq-merge '() (rest b-seq)))
  (< (first a-seq) (first b-seq)) (cons (first a-seq) (seq-merge (rest a-seq) b-seq))
  :else (cons (first b-seq) (seq-merge a-seq (rest b-seq)))))
(defn merge-sort [a-seq]
  (if (or (singleton? a-seq) (empty? a-seq))
  a-seq
  (seq-merge (apply merge-sort (halve a-seq)))))
(defn singleton? [coll]
  (if (empty? coll)
  false
  (if (empty? (rest coll))
  true
  false)))
(defn merge-sort [a-seq]
  (if (or (singleton? a-seq) (empty? a-seq))
  a-seq
  (seq-merge (apply merge-sort (halve a-seq)))))
(merge-sort a-seq)
quit
(defn halve [a-seq]
  (let [puolet (int (/ (count a-seq) 2))]
  (vector (my-take puolet a-seq) (my-drop puolet a-seq))))
(defn my-take [n coll]
  (if (or (zero? n) (empty? coll))
  '()
  (cons 
  (first coll)
  (my-take (- n 1) (rest coll)))))
(defn my-drop [n coll]
  (if (zero? n)
  coll
  (my-drop (dec n) (rest coll))))
(defn halve [a-seq]
  (let [puolet (int (/ (count a-seq) 2))]
  (vector (my-take puolet a-seq) (my-drop puolet a-seq))))
(def a-seq '(1 3 2 4))
(get (halve a-seq) 1)
(get (halve a-seq) 0)
quit
(defn my-take [n coll]
  (if (or (zero? n) (empty? coll))
  '()
  (cons 
  (first coll)
  (my-take (- n 1) (rest coll)))))
(defn my-drop [n coll]
  (if (zero? n)
  coll
  (my-drop (dec n) (rest coll))))
(defn halve [a-seq]
  (let [puolet (int (/ (count a-seq) 2))]
  (vector (my-take puolet a-seq) (my-drop puolet a-seq))))
(def a-seq '(1 2))
(get (halve a-seq) 0)
(halve (get (halve a-seq) 0))
(defn singleton? [coll]
  (if (empty? coll)
  false
  (if (empty? (rest coll))
  true
  false)))
(defn my-take [n coll]
  (if (or (zero? n) (empty? coll))
  '()
  (cons 
  (first coll)
  (my-take (- n 1) (rest coll)))))
(defn my-drop [n coll]
  (if (zero? n)
  coll
  (my-drop (dec n) (rest coll))))
(defn halve [a-seq]
  (let [puolet (int (/ (count a-seq) 2))]
  (vector (my-take puolet a-seq) (my-drop puolet a-seq))))
(defn seq-merge [a-seq b-seq] ;;Pysähtyy, kun toinen listoista loppuu kesken???
  (cond 
  (and (empty? a-seq) (empty? b-seq)) '()
  (empty? b-seq) (cons (first a-seq) (seq-merge (rest a-seq) '()))
  (empty? a-seq) (cons (first b-seq) (seq-merge '() (rest b-seq)))
  (< (first a-seq) (first b-seq)) (cons (first a-seq) (seq-merge (rest a-seq) b-seq))
  :else (cons (first b-seq) (seq-merge a-seq (rest b-seq)))))
(defn merge-sort [a-seq]
  (if (or (singleton? a-seq) (empty? a-seq))
  a-seq
  (seq-merge 
  (merge-sort (get (halve a-seq) 0))
  (merge-sort (get (halve a-seq) 1))))
quit
)
quit
