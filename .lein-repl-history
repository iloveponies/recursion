(rotations [1 2 3])
(defn rotations [a-seq]
  (let [double-seq (concat a-seq a-seq)
        num (count a-seq)]
    (defn rotations-helper [b-seq]
      (if
          (= num (count b-seq))
        (list b-seq)
        (cons (take num b-seq) (rotations-helper (rest b-seq)))))
    (rotations-helper (rest double-seq))))
    
(rotations [1 2 3 4])
{:A 1, :b 2}
(doc assoc)
(assoc :A 3 {:A 1, :b 2})
(assoc {:A 1, :b 2} :A 2)
(defn my-frequencies-helper [freqs a-seq]
  (let [key (first a-seq)
        val (get freqs val)]
    (if val
      (my-frequencies-helper (assoc freqs key val) (rest a-seq))
      (my-frequencies-helper freqs (rest a-seq)))                 
    ))
(my-frequencies [:a "moi" :a "moi" "moi" :a 1])
(defn my-frequencies [a-seq]
   (frequencies-helper {} a-seq))
(defn my-frequencies [a-seq]
   (my-frequencies-helper {} a-seq))
(my-frequencies [:a "moi" :a "moi" "moi" :a 1])
(def f [:a "moi" :a "moi" "moi" :a 1])
f
(get {} (first f))
(def v (get {} (first f)))
(if v (1) (2))
(if v ("1") ("2"))
(if (v) ("1") ("2"))
v
(if v (true) (false))
(doc if)
(if 1  2 3)
(if nil 2 3)
(if v 2 3)
(defn my-frequencies-helper [freqs a-seq]
  (let [key (first a-seq)
        val (get freqs val)]
    (if val
      (my-frequencies-helper (assoc freqs key (inc val)) (rest a-seq))
      (my-frequencies-helper (assoc freqs key 1) (rest a-seq)))                 
    ))
(my-frequencies-helper {} f)
(assoc {} :a 1)
(get (assoc {} :a 1) :a)
(def v1 (get (assoc {} :a 1) :a))
(if v1 (assoc {:a 1} :a (inc v1)) 0)
(def v1 (get (assoc {} :a 1) :b))
(if v1 (assoc {:a 1} :a (inc v1)) 0)
f
(let [key (first f)
val (get {:a 2, :b 2} key]
(defn my-frequencies-helper [freqs a-seq]
  (let [key (first a-seq)
        val (get freqs key)]
    (if val
      (my-frequencies-helper (assoc freqs key (inc val)) (rest a-seq))
      (my-frequencies-helper (assoc freqs key 1) (rest a-seq)))                 
    ))
(my-frequencies-helper {} f)
(let [key (first f)
val (get {:a 2, :b 3} key)]
(if val val key))
(assoc {} :a 3)
(def g {})
(assoc g :e 1)
f
(let [key (first f)
val (get g key)]
(if val
(assoc g key (inc val))
(assoc g key 1))
)
(let [key (first f)
val (get {:a 1} key)]
(if val
(assoc (:a 1, :b 5}  key (inc val))
(defn my-frequencies-helper [freqs a-seq]
  (let [key (first a-seq)
        val (get freqs key)]
    (if (nil? val)
      (my-frequencies-helper (assoc freqs key 1) (rest a-seq))
      (my-frequencies-helper (assoc freqs key (inc val)) (rest a-seq)))                 
    ))
(my-frequencies-helper {} f)
(defn my-frequencies-helper [freqs a-seq]
  (let [key (first a-seq)
        val (get freqs key)]
    (if (nil? val)
      (my-frequencies-helper (assoc freqs key 1) (rest a-seq))
      ;;      (my-frequencies-helper (assoc freqs key (inc val)) (rest a-seq)))
            (my-frequencies-helper freqs (rest a-seq)))                 
    ))
(my-frequencies-helper {} f)
(defn my-frequencies-helper [freqs a-seq]
  (let [key (first a-seq)
        val (get freqs key)]
    (if (nil? val)
      0 2
)))
(my-frequencies-helper {} f)
(my-frequencies-helper {:a 1} f)
(defn my-frequencies-helper [freqs a-seq]
  (let [key (first a-seq)
        val (get freqs key)]
    (if (nil? val)
      
      (my-frequencies-helper (assoc freqs key 1) (rest a-seq))
      2
))
)
(my-frequencies-helper {:a 1} f)
(my-frequencies-helper {} f)
(get {} :a)
(my-frequencies-helper {:a 1} f)
f
(let [key (first f) 
val (get {:a 1} key]
(defn test1 [freqs a-seq]
(let [key (first a-seq)
val (get freqs key)]
(if val val key)))
(test1 {} f)
(test1 {:a 1} f)
(defn my-frequencies-helper [freqs a-seq]
  (let [key (first a-seq)
        val (get freqs key)
        rem-seq (rest a-seq)]
    (if val
            (my-frequencies-helper (assoc freqs key (inc val)) rem-seq)
            (my-frequencies-helper (assoc freqs key 1) rem-seq)
      
      ;;      (my-frequencies-helper (assoc freqs key (inc val)) (rest a-seq)))
;;            (my-frequencies-helper freqs (rest a-seq)))                 
    )))
(my-frequencies-helper {} f)
(my-frequencies-helper {:a 1} f)
(test1 {} f)
(test1 {:f 1} f)
(defn test1 [freqs a-seq]
   (let [key (first a-seq)
   val (get freqs key)]
     (if val
       (assoc freqs key (inc val)
       (assoc freqs key 1) ))))
(test1 {} f)
(test1 {:a 1} f)
(test1 {:a 1} (rest f))
(defn test1 [freqs a-seq]
   (let [key (first a-seq)
   val (get freqs key)]
     (if val
       (assoc freqs key (inc val))
       (assoc freqs key 1) )))
(test1 {:a 1} f)
(test1 {} f)
(defn test1 [freqs a-seq]
   (let [key (first a-seq)
         val (get freqs key)
         rem-seq (rest a-seq)]
     (if val
       (cons (assoc freqs key (inc val)) rem-seq)
       (cons (assoc freqs key 1) rem-a-seq))) )
(defn test1 [freqs a-seq]
   (let [key (first a-seq)
         val (get freqs key)
         rem-seq (rest a-seq)]
     (if val
       (cons (assoc freqs key (inc val)) rem-seq)
       (cons (assoc freqs key 1) rem-seq))) )
(test1 {} f)
(test1 {:a 2} f)
(defn my-frequencies-helper [freqs a-seq]
  (let [key (first a-seq)
        val (get freqs key)
        rem-seq (rest a-seq)]
    (if val
            (my-frequencies-helper (assoc freqs key (inc val)) rem-seq)
            (my-frequencies-helper (assoc freqs key 1) rem-seq)
      
      ;;      (my-frequencies-helper (assoc freqs key (inc val)) (rest a-seq)))
;;            (my-frequencies-helper freqs (rest a-seq)))                 
            )))
(my-frequencies-helper {:a 1} f)
(my-frequencies-helper {} f)
(test1 {:a 1} f)
(test1 {} f)
(defn my-frequencies-helper [freqs a-seq]
  (let [key (first a-seq)
        val (get freqs key)
        rem-seq (rest a-seq)]
    (if (empty? a-seq)
      nil
      (if val
            (my-frequencies-helper (assoc freqs key (inc val)) rem-seq)
            (my-frequencies-helper (assoc freqs key 1) rem-seq)
      
      ;;      (my-frequencies-helper (assoc freqs key (inc val)) (rest a-seq)))
;;            (my-frequencies-helper freqs (rest a-seq)))                 
            ))))
(my-frequencies-helper {} f)
f
(empty? f)
(defn my-frequencies-helper [freqs a-seq]
  (let [key (first a-seq)
        val (get freqs key)
        rem-seq (rest a-seq)]
    (if (empty? a-seq)
      freqs
      (if val
            (my-frequencies-helper (assoc freqs key (inc val)) rem-seq)
            (my-frequencies-helper (assoc freqs key 1) rem-seq)
            ))))
(my-frequencies-helper {} f)
(my-repeat :a 3)
(my-repeat 1 3)
(my-repeat 3 :a)
[:a 1]
(first [:a 1])
(second [:a 1])
(defn un-frequencies [a-map]
  (if (empty? a-map)
    nil
    (let [tuple (first a-map)]
      (cons (my-repeat (first tuple) (second tuple)) (rest a-map)))
    ))
(un-frequencies {:a 3 :b 2 "^_^" 1})             ;=> (:a :a :a "^_^" :b :b)
(un-frequencies (my-frequencies [:a :b :c :a]))  ;=> (:a :a :b :c)
(my-frequencies (un-frequencies {:a 100 :b 10})) ;=
(defn un-frequencies [a-map]
  (if (empty? a-map)
    nil
    (let [tuple (first a-map)]
      (cons (my-repeat (first tuple) (second tuple)) (un-frequencies (rest a-map))))
    ))
(un-frequencies (my-frequencies [:a :b :c :a]))  ;=> (:a :a :b :c)
(un-frequencies (my-frequencies [:a :b :c :a]))  
(defn un-frequencies [a-map]
  (if (empty? a-map)
    nil
    (let [tuple (first a-map)]
     ;; (cons (my-repeat (first tuple) (second tuple)) (un-frequencies (rest a-map))))
      (my-repeat (first tuple) (second tuple)))
      ))
(un-frequencies [:a 3, :g 6])
(defn un-frequencies [a-map]
  (if (empty? a-map)
    nil
    (cons 1 (un-frequencies a-map))
   ;; (let [tuple (first a-map)]
     ;; (cons (my-repeat (first tuple) (second tuple)) (un-frequencies (rest a-map))))
     ;; (my-repeat (first tuple) (second tuple)))
      ))
(un-frequencies [1 1, 2 2])
(un-frequencies {:a 1, :b 2})
(defn un-frequencies [a-map]
  (if (empty? a-map)
    nil
    (cons 1 (un-frequencies (rest a-map)))
   ;; (let [tuple (first a-map)]
     ;; (cons (my-repeat (first tuple) (second tuple)) (un-frequencies (rest a-map))))
     ;; (my-repeat (first tuple) (second tuple)))
      ))
(un-frequencies {:a 2 , :b 3, :c 1})
(defn un-frequencies [a-map]
  (if (empty? a-map)
    nil
    ;;(cons 1 (un-frequencies (rest a-map)))
    (let [tuple (first a-map)]
      (cons (first tuple) (un-frequencies (rest a-map))))
    ;;(cons (my-repeat (first tuple) (second tuple)) (un-frequencies (rest a-map))))
     ;; (my-repeat (first tuple) (second tuple)))
      ))
(un-frequencies {:a 1, :b 2, :c 3})
(defn un-frequencies [a-map]
  (if (empty? a-map)
    nil
    ;;(cons 1 (un-frequencies (rest a-map)))
    (let [tuple (first a-map)]
      (cons (my-repeat (first tuple) 3) (un-frequencies (rest a-map))))
    ;;(cons (my-repeat (first tuple) (second tuple)) (un-frequencies (rest a-map))))
     ;; (my-repeat (first tuple) (second tuple)))
      ))
(un-frequencies {:a 2, :b 1, :d 4})
(first {:a 2, :b 1, :d 4})
(first (first {:a 2, :b 1, :d 4}))
(let [tuple (first {:a 2, :b 1, :d 4})]
(first tuple))
(let [tuple (first {:a 2, :b 1, :d 4})]
(second tuple))
(let [tuple (first {:a 2, :b 1, :d 4})]
(my-repeat (first tuple)(second tuple))
)
(my-repeat :a 3)
(my-repeat 3 :a)
(defn un-frequencies [a-map]
  (if (empty? a-map)
    nil
    ;;(cons 1 (un-frequencies (rest a-map)))
    (let [tuple (first a-map)]
     ;; (cons (my-repeat (first tuple) 3) (un-frequencies (rest a-map))))
    (cons (my-repeat (second tuple) (first tuple)) (un-frequencies (rest a-map))))
     ;; (my-repeat (first tuple) (second tuple)))
      ))
(un-frequencies {:a 1, :b 3, :d 5})
(defn my-frequencies [a-seq]
   (my-frequencies-helper {} a-seq))
(defn un-frequencies [a-map]
  (if (empty? a-map)
    nil
    (let [tuple (first a-map)]
    (map cons (my-repeat (second tuple) (first tuple)) (un-frequencies (rest a-map))))
    ))
(un-frequencies {:a 1, :b 3, :d 5})
(defn un-frequencies [a-map]
  (if (empty? a-map)
    nil
    (let [tuple (first a-map)]
    (concat (my-repeat (second tuple) (first tuple)) (un-frequencies (rest a-map))))
    ))
(un-frequencies {:a 1, :b 3, :d 5})
(defn my-take [n coll]
  (if (= n 0)
    coll
    (cons (first coll) (my-take (dec n) (rest coll)))
    ))
(my-take 3 f)
(defn my-take [n coll]
  (if (= n 0)
    nil
    (cons (first coll) (my-take (dec n) (rest coll)))
    ))
(my-take 3 f)
(defn my-drop [n coll]
  (if (= n 0)
    coll
    (my-drop (dec n) (rest coll))
    ))
(my-drop 2 f)
(my-drop 4 f)
(def g [1 2 3 4 5])
(my-take 3 g)
(my-drop 2 g)
(my-drop 3 g)
(def g [1 2 3 4 5 6])
(my-drop 3 g)
(my-take 3 g)
(defn halve [a-seq]
  (let [splitpos (int (/ (count a-seq) 2))]
    (cons (my-take splitpos a-seq) (my-drop splitpos a-seqq))
    ))
(defn halve [a-seq]
  (let [splitpos (int (/ (count a-seq) 2))]
    (cons (my-take splitpos a-seq) (my-drop splitpos a-seqq))
    ))
(defn halve [a-seq]
  (let [splitpos (int (/ (count a-seq) 2))]
    (cons (my-take splitpos a-seq) (my-drop splitpos a-seq))
    ))
(halve g)
(defn halve [a-seq]
  (let [splitpos (int (/ (count a-seq) 2))]
    (cons (my-take splitpos a-seq) (cons (my-drop splitpos a-seq) nil))
    ))
(halve g)
(halve f)
(first ('()))
(defn seq-merge [a-seq b-seq]
  (cond
    (empty? a-seq) b-seq
    (empty? b-seq) a-seq
    :else
    (let
        [a-val (first a-seq)
         b-val (first b-seq)]
      (if (>= a-val b-val)
        (cons a-val (seq-merge (rest a-seq) b-seq))
        (cons b-val (seq-merge a-seq (rest b-seq)))
        ))))
(seq-merge [4] [1 2 6 7])        ;=> (1 2 4 6 7)
(seq-merge [1 5 7 9] [2 2 8 10]) 
(defn seq-merge [a-seq b-seq]
  (cond
    (empty? a-seq) b-seq
    (empty? b-seq) a-seq
    :else
    (let
        [a-val (first a-seq)
         b-val (first b-seq)]
      (if (<= a-val b-val)
        (cons a-val (seq-merge (rest a-seq) b-seq))
        (cons b-val (seq-merge a-seq (rest b-seq)))
        ))))
(seq-merge [1 5 7 9] [2 2 8 10]) 
(empty? (rest '()))
(empty? (first '()))
(halve f)
(halve g)
(let [one two] (halve g)
(cons two one))
(let [one two (halve g)]
(cons two one))
(doc let )
(defn merge-sort [a-seq]
  (if (empty? (rest a-seq))
    a-seq
    (let [halves (halve a-seq)
          firsthalf (first halves)
          secondhalf (second halves)]
      (seq-merge (merge-sort firsthalf) (merge-sort secondhalf))
      )))
(merge-sort [4 3 2 1])
(merge-sort [4 3 2 1 5])
(merge-sort [4 3 2 1 5 7 2])
(inits [1 2 3 4]) ;=> (() (1) (1 2) (1 2 3) (1 2 3 4))
(sort (inits [1 2 3 4]))
(reverse (inits [1 2 3 4]))
(defn tails [a-seq]
  (cond
    (empty? (rest a-seq)) (cons a-seq (cons (()) nil))
    :else (cons a-seq (tails (rest a-seq)))
    ))
(defn inits [a-seq]
  (tails (reverse a-seq)))
(inits [1 2 3 4])
(defn tails [a-seq]
  (cond
    (empty? (rest a-seq)) (cons a-seq (cons (()) nil))
    :else (cons a-seq (tails (rest a-seq)))
    ))
(defn inits [a-seq]
  (tails (reverse a-seq)))
(inits [1 2 3 4])
(cons '() false)
(cons 1 false)
(cons 1 0)
(cons 1 nil)
(cons 1 (cons '() nil))
 (cons '() nil)
(defn tails [a-seq]
  (cond
    (empty? (rest a-seq)) (cons a-seq (cons [] nil))
    :else (cons a-seq (tails (rest a-seq)))
    ))
(inits [1 2 3 4])
(tails [1 2 3 4])
(defn tails [a-seq]
  (if (empty? a-seq)
    (cons a-seq nil)
;;    (empty? (rest a-seq)) (cons a-seq (cons [] nil))
    (cons a-seq (tails (rest a-seq)))
    ))
(tails [1 2 3 4])
(inits [i 2 3 4])
(inits [1 2 3 4])
(list [ 1 2 3 4])
(concat list [ 1 2 3 4])
(map list [ 1 2 3 4])
(concat (map list [ 1 2 3 4]))
(str (map list [ 1 2 3 4]))
(tails [1 2 3 4])
(tails (list 1 2 3 4))
(tails (list 1 2 3 y))
(tails (list 1 2 3 "y"))
(defn tails [a-seq]
  (if (empty? a-seq)
    (cons a-seq nil)
    (cons (tails (rest a-seq)) a-seq)
    ))
(tails [1 2 3 4])
(inits [1 2 3 4])
(defn my-drop-while [pred? a-seq]
  (cond
    (empty?  a-seq) '()
    (pred? (first a-seq)) (my-take-while pred? (rest a-seq))
    :else a-seq
    )) 
(my-drop-while odd? [1 2 3 4])
(my-drop-while even? [1 2 3 4])
(my-take 2 [1 2 3 4]) ;=> (1 2)
(my-take 4 [:a :b])   ;=> (:a :b)
(my-range 0)  ;=> ()
(my-range 1)  ;=> (0)
(my-range 2)  ;=> (1 0)
(my-range 3)  ;=> (2 1 0)
(defn my-range [up-to]
  (cond
    (<= up-to 0) '()
    (= up-to 1) '(0)
    :else (cons (dec up-to)(my-range (dec up-to)))
    ))
(my-range 0)
(my-repeat -1 :a)   ;=> ()
