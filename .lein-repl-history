(doc first)
(doc rest)
(defn announce-treasurelocation
[{lat :lat lon :lon}]
(prinln (str "Treasure lat:" lat))
(println (str "Treasure lon:" lon)))
(defn announce-treasurelocation
[{lat :lat lon :lon}]
(println (str "Treasure lat:" lat))
(println (str "Treasure lon:" lon)))
(announce-treasurelocation {:lat 28.22 :lon 81.33})
(defn singleton? [coll]
  (cond
    (empty? coll) false
    (empty? rest) true
    :else false))
(singleton? [1])     ;=> true
(singleton? #{2})    ;=> true
(singleton? [])      ;=> false
(singleton? [1 2 3]) 
(defn singleton? [coll]
  (cond
    (empty? coll) false
    (empty? (rest coll)) true
    :else false))
(singleton? [1 2 3]) 
(singleton? #{2})    ;=> true
(singleton? [])
(empty? (rest []))
(empty? (first []))
(first [])
(defn my-last [coll]
  (if (empty? (rest coll))
    (first coll)
    (my-last (rest coll))))
(my-last [])      ;=> nil
(my-last [1 2 3]) ;=> 3
(my-last [2 5])   ;=> 5
(defn max-element [a-seq]
  (if (empty? (rest a-seq))
    (first a-seq)
    (max (first a-seq) (max-element (rest a-seq)))
    ))
(max-element [2 4 1 4]) ;=> 4
(max-element [2])       ;=> 2
(max-element [])    
(defn seq-max [seq-1 seq-2]
  (if (> (count seq-1) (count seq-2))
    seq-1
    seq-2))
(seq-max [1] [1 2])   ;=> [1 2]
(seq-max [1 2] [3 4])
(seq-max [1 2 5] [3 4])
(defn longest-sequence [a-seq]
  (if (empty? (rest a-seq))
    (first a-seq)
    (seq-max (first a-seq) (longest-sequence (rest a-seq)))
    ))
(longest-sequence [[1 2] [] [1 2 3]]) ;=> [1 2 3]
(longest-sequence [[1 2]])            ;=> [1 2]
(longest-sequence [])                 ;=> nil
(longest-sequence [[1 2] [] [1 4 4 5 6] [1 2 3]]) ;=> [1 2 3]
(longest-sequence [[1 2] [] [1 2 3]]) ;=> [1 2 3]
(longest-sequence [[1 2]])            ;=> [1 2]
(longest-sequence [])                 ;=> nil
(defn my-filter [pred? a-seq]
  (if (empty? (a-seq))
    '()
    (if (pred? (first a-seq))
      (cons (first a-seq) (my-filter pred? (rest a-seq)))
      (my-filter pred? (rest a-seq))
      )))
(my-filter odd? [1 2 3 4]) ;=> (1 3)
(my-filter (fn [x] (> x 9000)) [12 49 90 9001]) ;=> (9001)
(my-filter even? [1 3 5 7]) ;=> ()
(defn my-filter [pred? a-seq]
  (cond
    (empty? (a-seq)) '()
    (pred? (first a-seq)) (cons (first a-seq) (my-filter pred? (rest a-seq)))
    :else (my-filter pred? (rest a-seq))
      ))
(my-filter even? [1 3 5 7]) ;=> ()
(even? (first [1 3 5 7]))
(defn my-filter [pred? a-seq]
(pred? (first a-seq)))
(my-filter even? [1 3])
(my-filter even? [4 3])
(defn my-filter [pred? a-seq]
  (cond
    (empty? (a-seq)) '()
    (pred? (first a-seq)) (cons (first a-seq) (my-filter pred? (rest a-seq)))
    :else (my-filter pred? (rest a-seq))
      ))
(my-filter [])
(defn my-filter [pred? a-seq]
  (cond
    (empty? (a-seq)) []
    :else (my-filter pred? (rest a-seq))
)
(my-filter even? [])
(defn my-empty? [a-seq]
(defn my-filter [pred? a-seq]
  (cond
    (empty? a-seq) '()
    (pred? (first a-seq)) (cons (first a-seq) (my-filter pred? (rest a-seq)))
    :else (my-filter pred? (rest a-seq))
      ))
(my-filter odd? [1 2 3 4]) ;=> (1 3)
(my-filter (fn [x] (> x 9000)) [12 49 90 9001]) ;=> (9001)
(my-filter even? [1 3 5 7]) ;=> ()
(defn sequence-contains? [elem a-seq]
  (cond
    (empty? a-seq) false
    (= (first a-seq) elem) true
    :else (sequence-contains? elem (rest a-seq)))
  )
(sequence-contains? 3 [1 2 3]) ;=> true
(sequence-contains? 3 [4 7 9]) ;=> false
(sequence-contains? :pony []) 
(defn my-take-while [pred? a-seq]
  (cond
    (empty? (rest a-seq)) '()
    (pred? (first a-seq) (cons (first a-seq) (my-take-while pred? (rest a-seq))))
    :else '()
    ))
(defn my-take-while [pred? a-seq]
  (cond
    (empty? (rest a-seq)) '()
    (pred? (first a-seq)) (cons (first a-seq) (my-take-while pred? (rest a-seq)))
    :else '()
    ))
(my-take-while odd? [1 2 3 4])  ;=> (1)
(my-take-while odd? [1 3 4 5])  ;=> (1 3)
(my-take-while even? [1 3 4 5]) ;=> ()
(my-take-while odd? [])         ;=> ()
(defn my-drop-while [pred? a-seq]
  (cond
    (empty? (rest a-seq)) '()
    (pred? (first a-seq)) (my-take-while pred? (rest a-seq))
    :else a-seq
    )) 
(my-drop-while odd? [1 2 3 4])  ;=> (2 3 4)
(my-drop-while odd? [1 3 4 5])  ;=> (4 5)
(my-drop-while even? [1 3 4 5]) ;=> (1 3 4 5)
(my-drop-while odd? [])         ;=> ()
(defn seq= [a-seq b-seq]
  (cond
    (and (empty? a-seq) (empty? b-seq)) true
    (or (empty? a-seq) (empty? b-seq)) false
    (= (first a-seq) (first b-seq)) (seq= (rest a-seq) (rest b-seq))
    :else false
    )) 
(seq= [1 2 4] '(1 2 4))  ;=> true
(seq= [1 2 3] [1 2 3 4]) ;=> false
(seq= [1 3 5] [])        ;=> false
(defn my-map [f seq-1 seq-2]
  (cond
    (or (empty? seq-1) (empty? seq-2)) nil
    :else (cons (f (first seq-1) (first seq-2)) (my-map f (rest seq-1) (rest seq-2)))
    ))
(my-map + [1 2 3] [4 4 4])   ;=> (5 6 7)
(my-map + [1 2 3 4] [0 0 0]) ;=> (1 2 3)
(my-map + [1 2 3] [])        ;=> ()
(defn power [n k]
  (if (zero? k)
    1
    (* n (power n (dec k)))
    ))
(power 2 3)
(power 2 5)
(power 5 5)
(power 5 3)
