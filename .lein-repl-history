(defn tails [a-seq]
(cond
    (empty? a-seq) '(())
    :else
    (cons a-seq (tails (rest a-seq)))
)
(tails [1 2 3 4]) ;=> ((1 2 3 4) (2 3 4) (3 4) (4) ())
(inits [1 2 3 4]) ;=> (() (1) (1 2) (1 2 3) (1 2 3 4))
; You can output the tails and inits in any order you like.
(inits [1 2 3 4]) ;=> ((1 2) () (1 2 3) (1) (1 2 3 4))
(defn tails [a-seq]
(cond
    (empty? a-seq) '(())
    :else
    (cons a-seq (tails (rest a-seq)))
)
(tails [1 2 3 4]) ;=> ((1 2 3 4) (2 3 4) (3 4) (4) ())
(inits [1 2 3 4]) ;=> (() (1) (1 2) (1 2 3) (1 2 3 4))
; You can output the tails and inits in any order you like.
(inits [1 2 3 4]) ;=> ((1 2) () (1 2 3) (1) (1 2 3 4))
(defn tails [a-seq]
(cond
    (empty? a-seq) '(())
    :else
    (cons a-seq (tails (rest a-seq)))
)
(tails [1 2 3 4]) ;=> ((1 2 3 4) (2 3 4) (3 4) (4) ())
(. System exit 0)
