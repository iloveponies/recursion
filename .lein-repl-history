(doc first)
(doc rest)
(defn announce-treasurelocation
[{lat :lat lon :lon}]
(prinln (str "Treasure lat:" lat))
(println (str "Treasure lon:" lon)))
(defn announce-treasurelocation
[{lat :lat lon :lon}]
(println (str "Treasure lat:" lat))
(println (str "Treasure lon:" lon)))
(announce-treasurelocation {:lat 28.22 :lon 81.33})
(defn singleton? [coll]
  (cond
    (empty? coll) false
    (empty? rest) true
    :else false))
(singleton? [1])     ;=> true
(singleton? #{2})    ;=> true
(singleton? [])      ;=> false
(singleton? [1 2 3]) 
(defn singleton? [coll]
  (cond
    (empty? coll) false
    (empty? (rest coll)) true
    :else false))
(singleton? [1 2 3]) 
(singleton? #{2})    ;=> true
(singleton? [])
(empty? (rest []))
(empty? (first []))
(first [])
(defn my-last [coll]
  (if (empty? (rest coll))
    (first coll)
    (my-last (rest coll))))
(my-last [])      ;=> nil
(my-last [1 2 3]) ;=> 3
(my-last [2 5])   ;=> 5
(defn max-element [a-seq]
  (if (empty? (rest a-seq))
    (first a-seq)
    (max (first a-seq) (max-element (rest a-seq)))
    ))
(max-element [2 4 1 4]) ;=> 4
(max-element [2])       ;=> 2
(max-element [])    
(defn seq-max [seq-1 seq-2]
  (if (> (count seq-1) (count seq-2))
    seq-1
    seq-2))
(seq-max [1] [1 2])   ;=> [1 2]
(seq-max [1 2] [3 4])
(seq-max [1 2 5] [3 4])
(defn longest-sequence [a-seq]
  (if (empty? (rest a-seq))
    (first a-seq)
    (seq-max (first a-seq) (longest-sequence (rest a-seq)))
    ))
(longest-sequence [[1 2] [] [1 2 3]]) ;=> [1 2 3]
(longest-sequence [[1 2]])            ;=> [1 2]
(longest-sequence [])                 ;=> nil
(longest-sequence [[1 2] [] [1 4 4 5 6] [1 2 3]]) ;=> [1 2 3]
(longest-sequence [[1 2] [] [1 2 3]]) ;=> [1 2 3]
(longest-sequence [[1 2]])            ;=> [1 2]
(longest-sequence [])                 ;=> nil
(defn my-filter [pred? a-seq]
  (if (empty? (a-seq))
    '()
    (if (pred? (first a-seq))
      (cons (first a-seq) (my-filter pred? (rest a-seq)))
      (my-filter pred? (rest a-seq))
      )))
(my-filter odd? [1 2 3 4]) ;=> (1 3)
(my-filter (fn [x] (> x 9000)) [12 49 90 9001]) ;=> (9001)
(my-filter even? [1 3 5 7]) ;=> ()
(defn my-filter [pred? a-seq]
  (cond
    (empty? (a-seq)) '()
    (pred? (first a-seq)) (cons (first a-seq) (my-filter pred? (rest a-seq)))
    :else (my-filter pred? (rest a-seq))
      ))
(my-filter even? [1 3 5 7]) ;=> ()
(even? (first [1 3 5 7]))
(defn my-filter [pred? a-seq]
(pred? (first a-seq)))
(my-filter even? [1 3])
(my-filter even? [4 3])
(defn my-filter [pred? a-seq]
  (cond
    (empty? (a-seq)) '()
    (pred? (first a-seq)) (cons (first a-seq) (my-filter pred? (rest a-seq)))
    :else (my-filter pred? (rest a-seq))
      ))
(my-filter [])
(defn my-filter [pred? a-seq]
  (cond
    (empty? (a-seq)) []
    :else (my-filter pred? (rest a-seq))
)
(my-filter even? [])
(defn my-empty? [a-seq]
(defn my-filter [pred? a-seq]
  (cond
    (empty? a-seq) '()
    (pred? (first a-seq)) (cons (first a-seq) (my-filter pred? (rest a-seq)))
    :else (my-filter pred? (rest a-seq))
      ))
(my-filter odd? [1 2 3 4]) ;=> (1 3)
(my-filter (fn [x] (> x 9000)) [12 49 90 9001]) ;=> (9001)
(my-filter even? [1 3 5 7]) ;=> ()
(defn sequence-contains? [elem a-seq]
  (cond
    (empty? a-seq) false
    (= (first a-seq) elem) true
    :else (sequence-contains? elem (rest a-seq)))
  )
(sequence-contains? 3 [1 2 3]) ;=> true
(sequence-contains? 3 [4 7 9]) ;=> false
(sequence-contains? :pony []) 
(defn my-take-while [pred? a-seq]
  (cond
    (empty? (rest a-seq)) '()
    (pred? (first a-seq) (cons (first a-seq) (my-take-while pred? (rest a-seq))))
    :else '()
    ))
(defn my-take-while [pred? a-seq]
  (cond
    (empty? (rest a-seq)) '()
    (pred? (first a-seq)) (cons (first a-seq) (my-take-while pred? (rest a-seq)))
    :else '()
    ))
(my-take-while odd? [1 2 3 4])  ;=> (1)
(my-take-while odd? [1 3 4 5])  ;=> (1 3)
(my-take-while even? [1 3 4 5]) ;=> ()
(my-take-while odd? [])         ;=> ()
(defn my-drop-while [pred? a-seq]
  (cond
    (empty? (rest a-seq)) '()
    (pred? (first a-seq)) (my-take-while pred? (rest a-seq))
    :else a-seq
    )) 
(my-drop-while odd? [1 2 3 4])  ;=> (2 3 4)
(my-drop-while odd? [1 3 4 5])  ;=> (4 5)
(my-drop-while even? [1 3 4 5]) ;=> (1 3 4 5)
(my-drop-while odd? [])         ;=> ()
(defn seq= [a-seq b-seq]
  (cond
    (and (empty? a-seq) (empty? b-seq)) true
    (or (empty? a-seq) (empty? b-seq)) false
    (= (first a-seq) (first b-seq)) (seq= (rest a-seq) (rest b-seq))
    :else false
    )) 
(seq= [1 2 4] '(1 2 4))  ;=> true
(seq= [1 2 3] [1 2 3 4]) ;=> false
(seq= [1 3 5] [])        ;=> false
(defn my-map [f seq-1 seq-2]
  (cond
    (or (empty? seq-1) (empty? seq-2)) nil
    :else (cons (f (first seq-1) (first seq-2)) (my-map f (rest seq-1) (rest seq-2)))
    ))
(my-map + [1 2 3] [4 4 4])   ;=> (5 6 7)
(my-map + [1 2 3 4] [0 0 0]) ;=> (1 2 3)
(my-map + [1 2 3] [])        ;=> ()
(defn power [n k]
  (if (zero? k)
    1
    (* n (power n (dec k)))
    ))
(power 2 3)
(power 2 5)
(power 5 5)
(power 5 3)
(defn fib [n]
  (cond
    (= n 1) 1
    (= n 2) 1
    :else (+ (fib (dec n)) (fib (- n 2)))
    ))
(fib 5)
(fib 3)
(fib 8)
(fib 10)
(defn my-repeat [how-many-times what-to-repeat]
  (if (= how-many-times 0)
    nil
    (cons what-to-repeat (my-repeat (dec how-many-times) what-to-repeat))
    ))
(my-repeat 2 :a)    ;=> (:a :a)
(my-repeat 3 "lol") ;=> ("lol" "lol" "lol")
(my-repeat -1 :a)   ;=> ()
(defn my-repeat [how-many-times what-to-repeat]
  (if (<= how-many-times 0)
    nil
    (cons what-to-repeat (my-repeat (dec how-many-times) what-to-repeat))
    ))
(my-repeat -1 :a)   ;=> ()
(defn my-repeat [how-many-times what-to-repeat]
  (if (<= how-many-times 0)
    nil
    (cons what-to-repeat (my-repeat (dec how-many-times) what-to-repeat))
    ))
(defn my-range [up-to]
  (if (= up-to 0)
    0
    (cons (dec up-to)(my-range (- up-to 2)))
    ))
(my-range 3)
(defn my-range [up-to]
  (cond
    (<= up-to 0) nil
    (= up-to 1) '(0)
    :else (cons (dec up-to)(my-range (- up-to 2)))
    ))
(my-range 3)
(defn my-range [up-to]
  (cond
    (<= up-to 0) nil
    (= up-to 1) '(0)
    :else (cons (dec up-to)(my-range (dec up-to)))
    ))
(my-range 3)
(my-range 5)
(my-range 1)
(my-range 0)
(defn tails [a-seq]
  (cons a-seq (tails (rest a-seq))))
(tails '(1 2 3))
(tails [1 2 3])
(rest [1 2 3 4])
(defn tails [a-seq]
  (if (empty? (rest a-seq))
    nil
    (cons a-seq (tails (rest a-seq)))
    ))
(tails [1 2 3 4])
(defn tails [a-seq]
  (if (empty? (rest a-seq))
    (cons (first (a-seq) nil))
    (cons a-seq (tails (rest a-seq)))
    ))
(tails [1 2 3 4])
(defn tails [a-seq]
  (if (empty? (rest a-seq))
    (first (a-seq))
    (cons a-seq (tails (rest a-seq)))
    ))
(tails [1 2 3 4])
(defn tails [a-seq]
  (cond
    (empty? (first a-seq) '()
    (empty? (rest a-seq)) (first (a-seq))
    (cons a-seq (tails (rest a-seq)))
    )))
(defn tails [a-seq]
  (cond
    (empty? (first a-seq)) '()
    (empty? (rest a-seq)) (first (a-seq))
    :else (cons a-seq (tails (rest a-seq)))
    ))
(tails [1 2 3])
(tails [1 2 3 4])
(cons 1 '())
(defn tails [a-seq]
  (cond
;;    (empty? (first a-seq)) '()
    (empty? (rest a-seq)) (cons (first (a-seq)) '())
    :else (cons a-seq (tails (rest a-seq)))
    ))
(tails [1 2 3])
(def t [1 2 3])
(cons t '())
(cons t (cons 1 '())
)
(cons t (cons 1 '())
)
(defn tails [a-seq]
  (cond
;;    (empty? (first a-seq)) '()
    (empty? (rest a-seq)) (cons (first (a-seq)) '())
    :else (cons a-seq (cons (tails (rest a-seq))))
    ))
(tails [1 2 3 4])
(cons t ( cons [2 3] (cons [3] (cons '()))))
(cons [1 2] (con [3 4] (cons '())))
(cons ([1 2]) (con ([3 4]) (cons '())))
(cons 1 (con 2 (cons '())))
(cons ([1 2]) (cons ([3 4]) (cons '())))
(cons [1 2] (cons [3 4] (cons '())))
(cons 2 (cons 3  (cons '())))
 (cons 3  (cons '()))
 (cons 3 2)
 (doc cons )
 (cons  1 '())
 (cons  1 (cons 1 '())
)
 (cons  [1] (cons [1] '()))
 (cons  [1 4] (cons [14 4] '()))
(defn tails [a-seq]
  (cond
;;    (empty? (first a-seq)) '()
    (empty? (rest a-seq)) (cons (first (a-seq)) '())
    :else (cons a-seq (tails (rest a-seq)))
    ))
(tails [1 2 3])
(tails [1])
(empty? (rest [1]))
(rest [1])
(cons [1] '())
(cons (first [1]) '())
(defn tails [a-seq]
  (cond
;;    (empty? (first a-seq)) '()
    (empty? (rest a-seq)) (cons (a-seq) '())
    :else (cons a-seq (tails (rest a-seq)))
    ))
(tails [1])
(defn tails [a-seq]
  (cond
;;    (empty? (first a-seq)) '()
    (empty? (rest a-seq)) (cons a-seq '())
    :else (cons a-seq (tails (rest a-seq)))
    ))
(tails [1])
(tails [1 2])
(tails [1 2 3 4])
(map cons [1 2 3 4])
(map cons [1 2 3 4] '())
(list [1 2 3 4])
(map list [1 2 3 4])
(apply cons [1 2 3 4])
(apply cons [1 2 3 4] '())
(cons (first [1 2 3 4]) (rest [1 2 3 4]))
(cons [1] (cons [2] (cons '())))
(cons [1] (cons '()))
(cons 1 (cons '()))
(cons 1 (cons [] '()))
(defn tails [a-seq]
  (cond
    (empty? (rest a-seq)) (cons a-seq (cons [] '()))
    :else (cons a-seq (tails (rest a-seq)))
    ))
(tails [1 2 3 4])
(def a (1 2 3 4))
(def a '(1 2 3 4))
a
(concat a a)
(take 4 (concat a a))
(take 4 ( rest (concat a a)))
(map inc a)
(map count a)
(get 2 a)
(get a 2)
(doc get)
(pos 2 a)
(pos? 2)
(my-range 4)
(take 3 a)
(take 4 a)
(take 4 (concat a a))
(tails a)
(inits a)
(tails (reverse a))
(defn inits [a-seq]
  (tails (reverse a-seq)))
(inits a)
(defn rotations [a-seq]
  ;; create a new array as concat of this array twice
  ;; map accross each element in original array and take the original count of elements
  (let [double-seq (concat a-seq a-seq)
        num (count a-seq)]
    (defn rotations-helper [b-seq]
      (cond
        (= num (count b-seq)) b-seq
        ;; recurse with helper fn here
        (cons (take num b-seq) (rotations-helper (rest b-seq)))))
    (rotations-helper (rest double-seq))))
(defn rotations [a-seq]
  ;; create a new array as concat of this array twice
  ;; map accross each element in original array and take the original count of elements
  (let [double-seq (concat a-seq a-seq)
        num (count a-seq)]
    (defn rotations-helper [b-seq]
      (if
          (= num (count b-seq))
        b-seq
        ;; recurse with helper fn here
        (cons (take num b-seq) (rotations-helper (rest b-seq)))))
    (rotations-helper (rest double-seq))))
(rotations [1 2 3])
(defn rotations [a-seq]
  (let [double-seq (concat a-seq a-seq)
        num (count a-seq)]
    (defn rotations-helper [b-seq]
      (if
          (= num (count b-seq))
        '(b-seq)
        (cons (take num b-seq) (rotations-helper (rest b-seq)))))
    (rotations-helper (rest double-seq))))
    
(rotations '(1 2 3))
(rotations [1 2 3])
(defn rotations [a-seq]
  (let [double-seq (concat a-seq a-seq)
        num (count a-seq)]
    (defn rotations-helper [b-seq]
      (if
          (= num (count b-seq))
        b-seq
        (cons (take num b-seq) (rotations-helper (rest b-seq)))))
    (rotations-helper (rest double-seq))))
(rotations [1 2 3])
(defn rotations [a-seq]
  (let [double-seq (concat a-seq a-seq)
        num (count a-seq)]
    (defn rotations-helper [b-seq]
      (if
          (= num (count b-seq))
        (list b-seq)
        (cons (take num b-seq) (rotations-helper (rest b-seq)))))
    (rotations-helper (rest double-seq))))
    
(rotations [1 2 3 4])
