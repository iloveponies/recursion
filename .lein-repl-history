(rotations [1 2 3])
(use 'recursion)
(rotations [1 2 3])
(use 'recursion)
(rotations [1 2 3])
exit
(use 'recursion)
(rotations [1 2 3])
(use 'recursion :reload)
(rotations [1 2 3])
(map concat ((1 2 3) (2 3) (3) ()) (() (1) (1 2) (1 2 3)))
(map (apply concat ((1 2 3) (2 3) (3) ()) (() (1) (1 2) (1 2 3))))
(concat (1 2 3) ())
(concat [1 2 3] [])
(vec ((1 2 3) (2 3) (3) ()) (() (1) (1 2) (1 2 3)))
(map vec ((1 2 3) (2 3) (3) ()) (() (1) (1 2) (1 2 3)))
(map vec ((1 2 3) (2 3)))
(map (apply vec ((1 2 3) (2 3))))
(map vector ((1 2 3) (2 3)))
(vec (1 2 3))
(vector (1 2 3))
(concat (1 2 3) (2 3))
(concat '(1 2 3) '(2 3))
(seq (1 2 3))
(inits [1 2 3])
(first (inits [1 2 3]))
(concat (first (inits [1 2 3])) 4)
(use 'recursion :reload)
(tails [1 2 3])
(use 'recursion :reload)
(tails [1 2 3])
(use 'recursion :reload)
(tails [1 2 3])
(use 'recursion :reload)
(tails [1 2 3])
(inits [1 2 3])
(vec (inits [1 2 3]))
(map vec (vec (inits [1 2 3])))
(vec (map vec (inits [1 2 3])))
(use 'recursion :reload)
(vec (map vec (inits [1 2 3])))
(vec (map vec (tails [1 2 3])))
(use 'recursion :reload)
(rotations (1 2 3))
(rotations [1 2 3])
(vec (map vec (tails [1 2 3])))
(map concat (vec (map vec (tails [1 2 3]))) (vec (map vec (reverse (inits a-seq)))))
(map concat (vec (map vec (tails [1 2 3]))) (vec (map vec (reverse (inits [1 2 3])))))
(use 'recursion :reload)
(rotations [1 2 3])
(use 'recursion :reload)
(rotations [1 2 3])
(use 'recursion :reload)
(rotations [1 2 3])
(use 'recursion :reload)
(rotations [1 2 3])
exit
(first {:a 2, :b 3})
(first (first {:a 2, :b 3}))
(second (first {:a 2, :b 3}))
(use 'recursion :reload)
(un-frequencies {:a 2, :b 3})
(rest {:a 2, :b 3})
(rest {:a 2, :b 3, :c 5})
(use 'recursion :reload)
(un-frequencies {:a 2, :b 3})
(int (/ 3 2))
(int (/ 1 2))
(use 'recursion :reload)
(my-drop 0 [1 2 3])
(use 'recursion :reload)
(my-drop 0 [1 2 3])
(int (/ 5 2))
(my-drop 2 (1 2 3 4 5))
(my-drop 2 [1 2 3 4 5])
(my-drop 2 [1 2 3 4])
(use 'recursion :reload)
(my-drop 2 [1 2 3 4])
(my-drop 2 [1 2 3 4 5])
(use 'recursion :reload)
(my-drop 2 [1 2 3 4 5])
(use 'recursion :reload)
(my-drop 2 [1 2 3 4 5])
(use 'recursion :reload)
(my-drop 2 [1 2 3 4 5])
(inits [1 2 3 4 5]
(inits [1 2 3 4 5])
)
(inits [1 2 3 4 5])
(reverse (inits [1 2 3 4 5]))
(use 'recursion :reload)
(monotonics-helper [1 2 3 2])
(monotonics-helper (inits [1 2 3 2]))
(inits [1 2 3 2])
(empty? [1 2 3 2])
(singleton? [1 2 3 2])
(first (inits [1 2 3 2]))
(<= (first (inits [1 2 3 2])))
(apply <= (first (inits [1 2 3 2])))
(apply >= (first (inits [1 2 3 2])))
(apply <= (second (inits [1 2 3 2])))
(rest (inits [1 2 3 2]))
(singleton? (inits [1 2 3 2]))
(monotonics-helper (inits [1 2 3 2]))
(inits [1 2 3 2])
(or (apply <= (first (inits [1 2 3 2]))) (apply >= (first (inits [1 2 3 2]))))
(monotonics-helper (()))
(monotonics-helper '(()))
(use 'recursion :reload)
(monotonics-helper (inits [1 2 3 2]))
