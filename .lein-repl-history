    (if (pred? (first a-seq))
      (cons (first a-seq) (my-take-while pred? (rest a-seq)))
      a-seq)))
(my-take-while odd? [1 2 3 5])
(my-take-while odd? [1 2 3 4])
(defn my-take-while [pred? a-seq]
  (if (empty? a-seq) a-seq
    (if (pred? (first a-seq))
      (cons (first a-seq) (my-take-while pred? (rest a-seq)))
      a-seq)))
(my-take-while odd? [1 2 3 4 5])
(defn my-filter [pred? a-seq]
  (if (empty? a-seq) a-seq
    (if (pred? (first a-seq)) 
      (cons (first a-seq) (my-filter pred? (rest a-seq)))
      (my-filter pred? (rest a-seq)))))
(my-filter odd? [1 2 3 4 5])
(source take-while)
(defn my-take-while [pred? a-seq]
  (if (empty? a-seq) a-seq
    (if (pred? (first a-seq))
      (cons (first a-seq) (my-take-while pred? (rest a-seq))))))
(my-take-while odd? [1 2 3 4 5])
(my-take-while odd? [1 3 4 5])
(my-take-while odd? [])
(defn my-take-while [pred? a-seq]
  (when (pred? (first a-seq))
        (cons (first a-seq) (my-take-while pred? (rest a-seq)))))
(my-take-while odd? [])
(my-take-while odd? [1 3 5 10])
(take odd? [])
(defn my-take-while [pred? a-seq]
  (if (empty? a-seq) ()
    (when (pred? (first a-seq))
      (cons (first a-seq) (my-take-while pred? (rest a-seq))))))
(my-take-while odd? [1 2 3 4 5])
(my-take-while even? [1 2 3 4 5])
(defn my-take-while [pred? a-seq]
  (if (empty? a-seq) ()
    (if (pred? (first a-seq))
      (cons (first a-seq) (my-take-while pred? (rest a-seq)))
      '())))
(my-take-while even? [1 2 2 3 4])
(defn my-take-while [pred? a-seq]
  (if (pred? (first a-seq))
    (cons (first a-seq) (my-take-while pred? (rest a-seq)))
    '()))
(my-take-while even? [1 2 2 3])
(my-take-while even? [])
(defn my-take-while [pred? a-seq]
  (if (empty? a-seq) '()
    (if (pred? (first a-seq))
      (cons (first a-seq) (my-take-while pred? (rest a-seq)))
      '())))
(my-take-while odd? [])
(drop odd? '(1 2 3 4 5))
(drop-while odd? '(1 2 2 3 4))
(defn my-drop-while [pred? a-seq]
  (if (empty? a-seq) '()
    (if (pred? (first a-seq))
      (my-drop-while pred? (rest a-seq))
      a-seq)))
(my-drop-while odd? [1 2 3 4])
(my-drop-while odd? [1 3 4 5])
(my-drop-while even? [1 3 4 5])
(my-drop-while odd? [])
(defn seq= [a-seq b-seq]
  (cond 
    (not (= (first a-seq) (first b-seq))) false
    (and (empty? a-seq) (empty? b-seq)) true
    :else (seq= (rest a-seq) (rest b-seq))))
(seq= [1 2 3] [1 2 3])
(seq= [1 2 3] '(1 2 3))
(seq= [1 2 3] [1 2 3 4])
(seq= [1 2 3] [])
(seq= [] [])
(source map)
(and (seq '(1 2 3)) (seq '(4 5 7))
)
(doc cons)
(map (range 3) [:a :b :c])
(map (vec (range 3)) [:a :b :c])
(map vector (range 3) [:a :b :c])
;; Test function
(defn indexed [a-seq]
  (let [indexes (range 0 (count a-seq))]
    (map vector indexes a-seq)))
(indexed [1 2 3 4])
(indexed [:a :b :c :d])
(defn power [n k]
  (if (= k 1) n
    (power (* n n) (dec k))))
(power 2 3)
(defn power [n k]
  (if (= k 2) n
    (power (* n n) (dec k))))
(power 2 3)
(defn power [n k]
  (if (< k 2) n
    (power (* n n) (dec k))))
(power 2 3)
(defn power [n k]
  (if (< k 2) n
    (n * power n (dec k))))
(power 2 3)
(defn power [n k]
  (if (< k 2) n
    (* n (power n (dec k)))))
(power 2 3)
(power 4 3)
(defn fib [n]
  (cond
    (zero? n) 0
    (or (= 1 n) (= 2 n)) 1
    :else (+ (fib (dec n)) (fib (- n 2)))))
(fib 5)
(fib 10)
(cons 1 '())
(defn my-repeat [how-many-times what-to-repeat]
  (cond
    (< 1 how-many-times) '()
    (= 1 how-many-times) what-to-repeat
    :else (my-repeat (dec how-many-times) (cons what-to-repeat '()))))
(my-repeat 2 :a)
(my-repeat 3 :a)
(my-repeat -1 :a)
(< 1 -1)
(defn my-repeat [how-many-times what-to-repeat]
  (cond
    (< how-many-times 1) '()
    (= 1 how-many-times) what-to-repeat
    :else (my-repeat (dec how-many-times) (cons what-to-repeat '()))))
(my-repeat -1 "Asd)
)
")
(my-repeat -1 "asd")
(my-repeat 1 "asd")
(my-repeat 2"asd")
(my-repeat 2 "asd")
(my-repeat 4 "asd")
(cons 4 4)
(doc repeat)
(source repeat)
(repeat 1 :a)
(defn my-repeat [how-many-times what-to-repeat]
  (cond
    (< how-many-times 1) '()
    (= 1 how-many-times) '(what-to-repeat) 
    :else (cons what-to-repeat) 
      (my-repeat (dec how-many-times) what-to-repeat)))
(defn my-repeat [how-many-times what-to-repeat]
  (cond
    (< how-many-times 1) '()
    (= 1 how-many-times) '(what-to-repeat) 
    :else (cons what-to-repeat 
                (my-repeat (dec how-many-times) what-to-repeat))))
(my-repeat 2 :a)
(defn my-repeat [how-many-times what-to-repeat]
  (cond
    (< how-many-times 1) '()
    (= 1 how-many-times) (list what-to-repeat) 
    :else (cons what-to-repeat 
                (my-repeat (dec how-many-times) what-to-repeat))))
(my-repeat 2 :a)
(my-repeat 3 "lol")
(my-repeat -3 "lol")
(range 1)
(range 20
)
(range 0)
(defn my-range [up-to]
  (if (zero? up-to) '()
    (cons up-to (my-range (dec up-to)))))
(my-range 10)
(defn my-range [up-to]
  (if (zero? (dec up-to)) '()
    (cons up-to (my-range (dec up-to)))))
(my-range 10)
(my-range 3)
(defn my-range [up-to]
  (if (zero? up-to) '()
    (cons (dec up-to) (my-range (dec up-to)))))
(my-range 10)
(my-range 3)
(my-range 1)
(my-range 2)
(my-range 0)
(defn tails [a-seq]
  (if (empty? a-seq) '()
    (cons (rest a-seq) (tails (rest a-seq)))))
(tails [1 2 3 4])
(defn tails [a-seq]
  (if (empty? a-seq) '()
    (cons a-seq (tails (rest a-seq)))))
(tails [1 2 3 4])
(defn tails [a-seq]
  (if (empty? a-seq) '()
    (cons (list a-seq) (tails (rest a-seq)))))
(tails [1 2 3 4])
(defn tails [a-seq]
  (if (empty? a-seq) '()
    (cons (into () a-seq) (tails (rest a-seq)))))
(tails [1 2 3 4])
(defn tails [a-seq]
  (if (empty? a-seq) '()
    (cons (reverse (into () a-seq)) (tails (rest a-seq)))))
(tails [1 2 3 4])
(tails (reverse [1 2 3 4])
)
(tails (reverse [1 2 3 4]))
(reverse (tails (reverse [1 2 3 4])))
(defn inits [a-seq]
  (map reverse (tails (reverse a-seq))))
(inits [1 2 3 4])
(defn inits [a-seq]
  (reverse (map reverse (tails (reverse a-seq)))))
(inits [1 2 3 4])
(defn tails [a-seq]
  (if (empty? a-seq) '(())
    (cons (reverse (into () a-seq)) (tails (rest a-seq)))))
(defn inits [a-seq]
  (reverse (map reverse (tails (reverse a-seq)))))
(inits [1 2 3 4])
(tails [1 2 3 4])
(doc cycle)
(take 3 (cycle [1 2 3]))
(take 9 (cycle [1 2 3]))
(source frequencies)
(doc transient)
(defn count-elem-helper [n elem coll]
  (if (empty? coll) n 
    (let [new-count (if (= elem (first coll)) (inc n) n)]
      (count-elem-helper new-count elem (rest coll)))))
(defn count-elem [elem coll]
  (count-elem-helper 0 elem coll))
(count-elem :a [:a :a :b :b :c :a])
(defn count-elem [elem coll]
  (let [count-elem-helper 
        (fn [n elem coll] 
          (if (empty? coll) n 
            (let [new-count (if (= elem (first coll)) (inc n) n)]
              (count-elem-helper new-count elem (rest coll)))))]
    (count-elem-helper 0 elem coll)))
(count-elem :a [:a :a :b :b :a :c])
(assoc
)
(doc assoc)
(assoc {:name 0} :name 1}
(assoc {:name 0} :name 1)
(defn my-frequencies-helper [freqs a-seq]
  (let [seq-key (first a-seq)]
    (if (contains? freqs seq-key)
      (assoc freqs seq-key (inc (get freqs seq-key)))
      (assoc freqs seq-key 1))))
(my-frequencies-helper {} [:a :a :b])
(defn my-frequencies-helper [freqs a-seq]
  (let [seq-key (first a-seq)]
    (if (contains? freqs seq-key)
      (my-frequencies-helper 
        (assoc freqs seq-key (inc (get freqs seq-key))) (rest a-seq)) 
      (my-frequencies-helper (assoc freqs seq-key 1) (rest a-seq)))))
(my-frequencies-helper {} [:a :a :b])
(defn my-frequencies-helper [freqs a-seq]
  (let [seq-key (first a-seq)
        new-freq (if (contains? freqs seq-key)
          (assoc freqs seq-key (inc (get freqs seq-key)))
          (assoc freqs seq-key 1))]
    (my-frequencies-helper new-freq (rest a-seq))))
(my-frequencies-helper {} [:a :a :b])
(defn my-frequencies-helper [freqs a-seq]
  (if (empty? a-seq) freqs
    (let [seq-key (first a-seq)
          new-freq (if (contains? freqs seq-key)
            (assoc freqs seq-key (inc (get freqs seq-key)))
            (assoc freqs seq-key 1))]
      (my-frequencies-helper new-freq (rest a-seq)))))
(my-frequencies-helper {} [:a :a :b])
(defn my-frequencies [a-seq]
  (my-frequencies-helper {} a-seq))
(my-frequencies [])
(my-frequencies [:a "moi" :a "moi" "moi" :a 1])
(doc repeat)
(repeat :a 2)
(repeat 2 :a)
(concat (repeat 2 :a) (repeat 3 :c))
(def m {:b 1, :a 2})
m
(first m)
(get (first m) 0)
m
(map m seq)
(doc map)
(map seq m)
(mapcat #(%1)  (map seq m)
)
(mapcat #(%)  (map seq m)
)
(mapcat #(get % 0)  (map seq m)
)
(defn un-frequencies [a-map]
  (mapcat (fn [[x y]] x) (map seq a-map)))
(un-frequencies m)
(map seq m)
(def mmap (map seq m))
mmap
(mapv seq m)
(doc mapcat)
(mapcat identity mmap)
(mapcat (fn [x] (first x)) mmap)
mmap
(first mmap)
(first (first mmap))
(last (first mmap))
m
(seq m)
(map seq m)
(map #(seq %) m)
(map (fn [[x y]] x) (seq m))
(map (fn [[x y]] (repeat y x)) (seq m))
(defn un-frequencies [a-map]
  (mapcat (fn [[x y]] (repeat y x)) (seq a-map)))
m
(un-frequencies m)
(un-frequencies {:a 3 :b 2 "^_^" 1}) 
(un-frequencies (my-frequencies [:a :b :c :a]))
(my-frequencies (un-frequencies {:a 100 :b 10}))
(take 0 '(1 2 3 4))
(defn my-take [n coll]
  (if (zero? n) '()
    (cons (first coll) (my-take (dec n) (rest coll)))))
(my-take 2 '(1 2 3 4))
(my-take 0 '(1 2 3 4))
(my-take 4 [:a :b])
(defn my-take [n coll]
  (if (or (zero? n) (empty? coll)) '()
    (cons (first coll) (my-take (dec n) (rest coll)))))
(my-take 4 [:a :b])
(my-take 2 [:a :b :c :d])
(defn my-drop [n coll]
  (if (zero? n) coll
    (my-drop (dec n) (rest coll))))
(my-drop 2 [1 2 3 4])
(my-drop 10 [1 2 3 4])
(defn my-drop [n coll]
  (if (or (empty? coll) (zero? n)) coll
    (my-drop (dec n) (rest coll))))
(my-drop 5 [1 2 3 4])
(my-drop 2 [1 2 3 4])
(my-drop 3 [1 2 3 4])
(drop 3 [1 2 3 4])
(defn halve [a-seq]
  (let [n (/ (count a-seq) 2)]
    (cons (my-drop n coll) (my-take n coll))))
(defn halve [a-seq]
  (let [n (/ (count a-seq) 2)]
    (cons (my-drop n a-seq) (my-take n a-seq))))
(halve [1 2 3 4])
(defn halve [a-seq]
  (let [n (/ (count a-seq) 2)]
    (concat (my-take n a-seq) (my-drop n a-seq))))
(halve [1 2 3 4])
(defn halve [a-seq]
  (let [n (/ (count a-seq) 2)]
    (cons (my-take n a-seq) (my-drop n a-seq) '())))
(halve [1 2 3 4])
(vec 1 2)
(vec (1 2)
)
(vec '(1 2))
(defn halve [a-seq]
  (let [n (/ (count a-seq) 2)]
    (vec (list (my-take n a-seq) (my-drop n a-seq)))))
(halve [1 2 3 4])
(halve [1 2 3 4 5])
(/ 5 2)
(int (/ 5 2))
(defn halve [a-seq]
  (let [n (int (/ (count a-seq) 2))]
    (vec (list (my-take n a-seq) (my-drop n a-seq)))))
(halve [1 2 3 4 5])
(halve [1 2 3 4])
(halve [1])
(> 2 4)
(> 10 4)
(< 1 4)
(cons
)
(doc cons)
(doc concat)
(defn seq-merge [a-seq b-seq]
  (let [a (first a-seq) b (first b-seq)]
    (cond
      (and (empty? a-seq) (empty? b-seq)) '()
      (empty? a-seq) b-seq
      (empty? b-seq) a-seq
      (< a b) (cons a (seq-merge (rest a-seq) b-seq))
      (> a b) (cons b (seq-merge a-seq (rest b-seq)))
      :else (concat (list a b) (seq-merge (rest a-seq) (rest b-seq))))))
(seq-merge [2 4 6] [1 3 5]) 
(seq-merge [4] [1 2 6 7]) 
(seq-merge [1 5 7 9] [2 2 8 10]) 
(defn halve [a-seq]
  (let [n (int (/ (count a-seq) 2))]
    (vec (list (my-take n a-seq) (my-drop n a-seq)))))
(defn seq-merge [a-seq b-seq]
  (let [a (first a-seq) b (first b-seq)]
    (cond
      (and (empty? a-seq) (empty? b-seq)) '()
      (empty? a-seq) b-seq
      (empty? b-seq) a-seq
      (< a b) (cons a (seq-merge (rest a-seq) b-seq))
      (> a b) (cons b (seq-merge a-seq (rest b-seq)))
      :else (concat (list a b) (seq-merge (rest a-seq) (rest b-seq))))))
(halve [1 2 3 4])
(defn merge-sort [a-seq]
  (if (< (count a-seq) 2) a-seq
    (let [[first-half second-half] (halve a-seq)]
      first-half
      )))
(merge-sort [1 2 3 4])
(defn merge-sort [a-seq]
  (if (< (count a-seq) 2) a-seq
    (let [[first-half second-half] (halve a-seq)]
      (merge-sort (seq-merge first-half second-half)))))
(merge-sort [4 2 1 3])
(< 1 2)
(< 2 2)
(seq-merge (2 4) (1 3))
(seq-merge (2 4) (1 3)
(seq-merge [2 4] [1 3])
(halve [4 2 3 1])
(seq-merge (4 2) (3 1))
(let [[x y] (halve [4 2 1 3])] x) 
(let [[x y] (halve [4 2 1 3])] (seq-merge x y)) 
(let [[x y] (halve [1 3 2 4])] (seq-merge x y)) 
(defn merge-sort [a-seq]
  (if (< (count a-seq) 2) a-seq
    (let [[first-half second-half] (halve a-seq)]
      (seq-merge first-half second-half))))
(merge-sort [1 3 2 4])
(defn merge-sort [a-seq]
  (if (< (count a-seq) 2) a-seq
    (let [[first-half second-half] (halve a-seq)]
      (seq-merge (merge-sort first-half) 
                 (merge-sort second-half)))))
(merge-sort [1 3 4 2])
(merge-sort [5 3 4 17 2 100 1])
(doc take-while)
(take-while > [1 2 5 2])
(inits [1 2 3 4])
(defn tails [a-seq]
  (if (empty? a-seq) '(())
    (cons (reverse (into () a-seq)) (tails (rest a-seq)))))
;; TODO: do it with a lower C in C(O(n))
(defn inits [a-seq]
  (reverse (map reverse (tails (reverse a-seq)))))
(tails [1 2 3 4])
(inits [1 2 3 4])
(defn inits [a-seq]
  (map reverse (tails (reverse a-seq))))
(inits [1 2 3 4])
(defn power [n k]
  (if (< k 2) n
    (* n (power n (dec k)))))
(power 7 0)
(defn power [n k]
  (cond 
    (< k 2) n
    (= k 0) 1
    :else (* n (power n (dec k)))))
(power (defn power [n k]
  (cond 
    (zero? k) 1
    (< k 2) n
    :else (* n (power n (dec k)))))
)
(defn power [n k]
  (cond 
    (zero? k) 1
    (< k 2) n
    :else (* n (power n (dec k)))))
(power 4 2)
(power 4 0)
(power 4 1)
(seq= [] [])
(defn seq= [a-seq b-seq]
  (cond 
    (not (= (first a-seq) (first b-seq))) false
    (and (empty? a-seq) (empty? b-seq)) true
    :else (seq= (rest a-seq) (rest b-seq))))
(seq= #{} [])
(seq= #{1} [2])
(defn my-map [f seq-1 seq-2]
  (if (or (empty? seq-1) (empty? seq-2)) '()
    (cons (f (first seq-1) (first seq-2)) 
          (my-map f (rest seq-1) (rest seq-2)))))
(my-map + [1 2 3] [4 5 6])
(my-map + [1 2 3] [4 4 4])
(my-map + [1 2 3 4] [0 0 0])
(my-map + [1 2 3 4] [])
