(use 'recursion)
(product (cons 1 (cons 2 (cons 3 (cons 4 '())))))
quit
(max 3 nil)
quit
(odd? (first []))
(odd? (first '()))
quit
(use 'recursion)
(my-repeat 1 "l")
(my-repeat 1 :a)
quit
(use 'recursion)
(tails [1 2])
(tails [2 1])
(inits [1 2])
(inits [1 2 3])
(inits [1 2 3 4])
(use 'recursion :reload)
(inits [1 2 3 4])
quit
(use 'recursion)
(rotations [1 2]
(use 'recursion)
(rotations [1 2])
(use 'recursion :reload)
(rotations [1 2])
(use 'recursion :reload)
(rotations [1 2])
(use 'recursion :reload)
(rotations [1 2])
(use 'recursion :reload)
(rotations [1 2])
(use 'recursion :reload)
(rotations [1 2])
(use 'recursion :reload)
(rotations [1 2])
(use 'recursion :reload)
(rotations [1 2])
(cons [1 2] '([2 1]))
(concat [1 2] 1)
(use 'recursion :reload)
(rotations [1 2])
(use 'recursion :reload)
(rotations [1 2])
(rotations [1 2 3 4])
(use 'recursion :reload)
(rotations [1 2])
(rotations [1 2 3])
(use 'recursion :reload)
(rotations [1 2])
(rotations [1])
(rotations [1 2])
(use 'recursion :reload)
(rotations [1 2])
(use 'recursion :reload)
(rotations [1 2])
(use 'recursion :reload)
(rotations [1])
(rotations [1 2])
(rotations [1])
(use 'recursion :reload)
(rotations [1 2])
(rotations [1 2 3])
(use 'recursion :reload)
(rotations [1 2 3])
(use 'recursion :reload)
(rotations [1 2 3])
(rest (first '([1 2 3])))
(first (first '([1 2 3])))
(conj (rest (first '([1 2 3]))) (first (first '([1 2 3]))))
(concat (rest (first '([1 2 3]))) [(first (first '([1 2 3])))])
(use 'recursion :reload)
(rotations [1 2 3])
quit
