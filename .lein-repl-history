(my-filter (fn [x] (> x 9000)) [12 49 90 9001]) ;=> (9001)
(cons [] [1 2 3])
(reload)
(my-filter (fn [x] (> x 9000)) [12 49 90 9001]) ;=> (9001)
(reload)
(my-filter (fn [x] (> x 9000)) [12 49 90 9001]) ;=> (9001)
(my-filter odd? [1 2 3 4]) ;=> (1 3)
(my-filter (fn [x] (> x 9000)) [12 49 90 9001]) ;=> (9001)
(my-filter even? [1 3 5 7]) ;=> ()
(defn reload [] (use 'recursion :reload))
(reload)
(sequence-contains? 3 [1 2 3])
(sequence-contains? 3 [4 7 9])
(sequence-contains? :pony [])
(reload)
(my-take-while odd? [1 2 3 4])
(cons 5 [])
(cons 5 2 [])
(cons 5 (cons 2 []))
(reload)
(my-take-while odd? [1 2 3 4])
(reload)
(my-take-while odd? [1 2 3 4])
(complement odd? 1)
(complement (odd? 1))
(reload)
(my-take-while odd? [1 2 3 4])
(reload)
(my-take-while odd? [1 2 3 4])
(reload)
(my-take-while odd? [1 2 3 4])
(reload)
(my-take-while odd? [1 2 3 4])
(reload)
(my-take-while odd? [1 2 3 4])
(reload)
(my-take-while odd? [1 2 3 4])
(reload)
(my-take-while odd? [1 2 3 4])
(my-take-while odd? [1 3 4 5])
(my-take-while even? [1 3 4 5])
(my-take-while odd? [])
(reload)
(my-take-while odd? [1 3 4 5])
(my-drop-while odd? [1 2 3 4])  ;=> (2 3 4)
(my-drop-while odd? [1 3 4 5])  ;=> (4 5)
(my-drop-while even? [1 3 4 5]) ;=> (1 3 4 5)
(my-drop-while odd? [])         ;=> ()
(reload)
(my-drop-while odd? [1 2 3 4])  ;=> (2 3 4)
(my-drop-while odd? [1 3 4 5])  ;=> (4 5)
(my-drop-while even? [1 3 4 5]) ;=> (1 3 4 5)
(my-drop-while odd? [])         ;=> ()
(not (odd? 3))
(reload)
(my-drop-while odd? [1 2 3 4])  ;=> (2 3 4)
(my-drop-while odd? [1 3 4 5])  ;=> (4 5)
(my-drop-while even? [1 3 4 5]) ;=> (1 3 4 5)
(my-drop-while odd? [])         ;=> ()
(reload)
(my-drop-while odd? [1 2 3 4])  ;=> (2 3 4)
(my-drop-while odd? [1 3 4 5])  ;=> (4 5)
(my-drop-while even? [1 3 4 5]) ;=> (1 3 4 5)
(my-drop-while odd? [])         ;=> ()
(doc help)
(use 'recursion :reload)
(def reload [] (use 'recursion :reload))
(defn reload [] (use 'recursion :reload))
(reload)
(product [1 2 3 4])
(darg
.model.tasks
/fetch-tasks-by-user-id
(use 'recursion)
(rld)
(product [1 2 3])
(my-drop-while #(< % 5) [1 2 3 4 5 6 7 8])
(lazy-seq)
(!= [1 2] [1 2 3])
(not (= [1 2] [1 2 3]))
(complement = [1 2] [1 2 3])
(rld)
(seq= [1 2 4] '(1 2 4))  ;=> true
(seq= [1 2 3] [1 2 3 4]) ;=> false
(seq= [1 3 5] [])        ;=> false
(rld)
(my-map + [1 2 3] [4 4 4])   ;=> (5 6 7)
(my-map + [1 2 3 4] [0 0 0]) ;=> (1 2 3)
(my-map + [1 2 3] [])        ;=> ()
(my-map + [1 2 3] [4 4 4])
(rld)
(my-map + [1 2 3] [4 4 4])   ;=> (5 6 7)
(my-map + [1 2 3 4] [0 0 0]) ;=> (1 2 3)
(rld)
(my-map + [1 2 3 4] [0 0 0]) ;=> (1 2 3)
(my-map + [1 2 3] [4 4 4])   ;=> (5 6 7)
(my-map + [1 2 3 4] [0 0 0]) ;=> (1 2 3)
(my-map + [1 2 3] [])        ;=> ()
(rld)
(dec 5 1)
(dec 5)
(rld)
(power 2 2)
(rld)
(power 2 2)
(rld)
(power 2 2)
(rld)
(power 2 2)
(rdl)
(rld)
(power 2 2)
(power 2 3)
(power 5 5)
(power 10 10)
(power 10 3)
(power 10 4)
(power 2 2)  ;=> 4
(power 5 3)  ;=> 125
(power 7 0)  ;=> 1
(power 0 10) ;=> 0
(rld)
(power 7 0)  ;=> 1
(rld)
(power 7 0)  ;=> 1
(power 0 10) ;=> 0
(power 5 3)  ;=> 125
(power 2 2)  ;=> 4
(power 5 3)  ;=> 125
(power 7 0)  ;=> 1
(power 0 10) ;=> 0
(rld)
(fib 6)
(rld)
(fib 6)
(rld)
(fib 6)
(fib 10)
 (rld)
(my-repeat 10 5)
(rld)
(my-repeat 10 5)
(rld)
(my-repeat 10 5)
(my-repeat 2 :a)    ;=> (:a :a)
(my-repeat 3 "lol") ;=> ("lol" "lol" "lol")
(my-repeat -1 :a)   ;=> ()
(rld)
(my-repeat 2 :a)    ;=> (:a :a)
(my-repeat 3 "lol") ;=> ("lol" "lol" "lol")
(my-repeat -1 :a)   ;=> ()
(rld)
(my-repeat -1 :a)   ;=> ()
(my-repeat 3 "lol") ;=> ("lol" "lol" "lol")
(my-repeat 2 :a)    ;=> (:a :a)
(rld)
(my-range 3)
(rld)
(my-range 3)
(rld)
(my-range 3)
(my-range 0)  ;=> ()
(my-range 1)  ;=> (0)
(my-range 2)  ;=> (1 0)
(my-range 3)  ;=> (2 1 0)
(rld)
(tails [1 2 3 4])
(rld)
(tails [1 2 3 4])
(rld)
(tails [1 2 3 4])
(rld)
(tails [1 2 3 4])
(rld)
(tails [1 2 3 4])
(rld)
(tails [1 2 3 4])
(rld)
(tails [1 2 3 4])
(rld)
(inits [1 2 3 4])
(map dec [1 2 3 4])
(drop-while)
(drop-while #(<= % 0) (map dec [1 2 3 4]))
(tails [1 2 3 4])
(rld)
(inits [1 2 3 4])
(def li [1 2 3 4])
(reverse (rest (reverse li)))
(rld)
(inits [1 2 3 4])
(rld)
(inits [1 2 3 4])
(rld)
(inits [1 2 3 4])
(rld)
(inits [1 2 3 4])
(rld)
(inits [1 2 3 4])
(rld)
(inits [1 2 3 4])
(reverse (inits [1 2 3 4]))
(rld)
(reverse (inits [1 2 3 4]))
(rld)
(reverse (inits [1 2 3 4]))
(rld)
(reverse (inits [1 2 3 4]))
(inits [1 2 3 4])
(rld)
(inits [1 2 3 4])
(rld)
(inits [1 2 3 4])
(rld)
(inits [1 2 3 4])
li
(take (- (count li) 1) li)
(rld)
(rotations [1 2 3 4])
(rld)
(rotations [1 2 3 4])
int [[]] [1 2 3 4]
cons [] [1 2 3 4]
(cons [] [1 2 3 4])
(add [1 2 3 4] [])
(concat [] [])
(concat [[]] [1 2 3 4])
[[]]
(concat [[1 2 3 4] []])
(take (- (count li) 1))
(take (- (count li) 1) li)
(rld)
(rotations [1 2 3 4])
(rld)
(rotations [1 2 3 4])
li
(last li)
(vector last li)
(vector (last li))
(concat (vector (last li)) [1 2 3])
(rld)
(rotations [1 2 3 4])
(rotations [4 1 2 3])
(rotations [3 4 1 2])
(rotations [2 3 4 1])
(rld)
(rotations [2 3 4 1])
(rld)
(rotations [1 2 3 4])
(rld)
(rotations [1 2 3 4])
(rotations [])        ;=> (())
(rotations [1 2 3])   ;=> ((1 2 3) (2 3 1) (3 1 2))
(rotations [:a :b])   ;=> ((:a :b) (:b :a))
; The order of rotations does not matter.
(rotations [:a :b])   ;=> ((:b :a) (:a :b))
(rotations [1 5 9 2]) ;=> ((1 5 9 2) (2 1 5 9) (9 2 1 5) (5 9 2 1))
(count (rotations [6 5 8 9 2])) ;=> 5
(rld)
(rotations [1 2 3 4])
(list)
(list list)
(list (list))
(rld)
(use 'recursion)
(rld)
(rotations [1 2 3 4])
(cons [1 2] 3)
(cons 1 [2 3])
(cons 1 [])
(rld)
(rotations [1 2 3 4])
(rld)
(rotations [1 2 3 4])
(rld)
(rotations [1 2 3 4])
(rld)
(rotations [1 2 3 4])
(rotations [])
(power 5 5)
{}
{:a 2}
{:name "Mike", :age 25}
(def mmap {:name "Mike", :age 25})
mmap
(age mmap)
(:age mmap)
mmap
(assoc {:sex "M"} mmap)
(assoc mmap {:sex "M"})
(assoc mmap :age 26)
(assoc mmap :sex "M")
(assoc mmap 1 1)
mmap
(if (contains? mmap :sex))
(if (contains? mmap :sex)
true false)
(if (contains? mmap :age) true false)
(:age mmap)
(def mmap (assoc mmap 1 1))
mmap
(if (contains mmap 1) true false)
(if (contains mmap :age) true false)
(if (contains? mmap :age) true false)
(if (contains? mmap 1) true false)
(1 mmap)
mmap
(def mmap {:name "Mike" :age 25})
mmap
(get mmap :age)
(def mmap (assoc mmap 1 1))
mmap
(get mmap 1)
(def mmap (assoc mmap 1 2))
mmap
(get mmap 1)
(def mmap (assoc mmap 1 2))
mmap
(rld)
(my-frequencies [])
(rld)
(my-frequencies [])
(my-frequencies
(my-frequencies [:a "moi" :a "moi" "moi" :a 1])
(def a-list [:a "moi" :a "moi" "moi" :a 1])
(contains? :a a-list)
(contains? a-list :a)
a-list
(contains? a-list "moi")
(rld)
(my-frequencies [:a "moi" :a "moi" "moi" :a 1])
(rld)
(my-frequencies [:a "moi" :a "moi" "moi" :a 1])
(contains? {} :a)
mmap
(get :age mmap)
(rld)
(my-frequencies [:a "moi" :a "moi" "moi" :a 1])
(rld)
(my-frequencies [:a "moi" :a "moi" "moi" :a 1])
(rld)
(my-frequencies [:a "moi" :a "moi" "moi" :a 1])
(inc nil)
(def fqs {:a 3, "moi" 3, 1 1})
fqs
(get 0 fqs)
(get :a fqs)
(get fqs 1)
(get fqs "moi")
(rld)
(my-frequencies [:a "moi" :a "moi" "moi" :a 1])
(rld)
(my-frequencies [:a "moi" :a "moi" "moi" :a 1])
(repeat 3 3)
(repeat 6 3)
(repeat 3 6)
fqs
(first fqs)
(rest fqs)
(empty? {})
(first {})
(concat [1 2] [3 4])
(concat 1 [2 3])
(concat [1] 2)
(repeat 6 3)
(repeat 3 6)
(rld)
(un-frequencies {:a 3 :b 2 "^_^ 1})
(un-frequencies {:a 3 :b 2 "^_^" 1}) 
(second [1 2])
(rld)
(un-frequencies {:a 3 :b 2 "^_^" 1}) 
(un-frequencies {:a 3 :b 2 "^_^" 1})             ;=> (:a :a :a "^_^" :b :b)
(un-frequencies (my-frequencies [:a :b :c :a]))  ;=> (:a :a :b :c)
(my-frequencies (un-frequencies {:a 100 :b 10})) ;=> {:a 100 :b 10}
(rld)
(my-take 2 [1 2 3 4])
(rld)
(my-take 2 [1 2 3 4])
(my-take 4 [:a :b])
(rld)
(my-take 4 [:a :b])
(use 'recursion)
(rld)
(/ 7 2)
(int (/ 7 2))
(def a-list [1 2 3 4])
(count a-list)
(/ (count a-list) 2)
(cons [1 2] [3 4])
(cons (cons [1 2]) [3 4])
(concat () [3 4])
(concat [] [3 4])
(take 2 [1 2 3])
(rld)
(halve [1 2 3 4])
(rld)
(halve [1 2 3 4])
(conj [1 2] [3 4])
(rld)
(halve [1 2 3 4])
(conj [1 2] [3 4])
(conj () [[1 2] [3 4]])
(conj () [3 4])
(conj [1 2] [3 4])
(conj [[1 2]] [3 4])
(rld)
(halve [1 2 3 4])
(rld)
(halve [1 2 3 4])
(conj (seq [1 2]) (seq [3 4]))
(apply (conj [1 2]) [3 4])
(conj [1 2] [3 4])
(conj (1 2) (3 4))
(conj (seq [1 2]) (seq [3 4]))
(cons (seq [1 2]) (seq [3 4]))
(rld)
(halve [1 2 3 4])
(def left [1 2])
(def right [3 4])
left
right
(seq left)
(seq right)
(concat left right)
(conj left right)
(into [] (conj left right))
(conj (into [] left) (into [] right))
(vec [1 2 3 4])
(assoc left right)
left
right
(assoc [] left 0)
(assoc [] 0 left)
(assoc [] 1 right)
(assoc (assoc [] 0 left) 1 right)
(rld)
(halve [1 2 3 4])
(halve [1 2 3 4])   ;=> [(1 2) (3 4)]
(halve [1 2 3 4 5]) ;=> [(1 2) (3 4 5)]
(halve [1])         ;=> [() (1)]
(rld)
(seq-merge [1 2] [3 4])
(rld)
(seq-merge [1 2] [3 4])
(seq-merge [4] [1 2 6 7])
(seq-merge [4] [1 2 6 7])        ;=> (1 2 4 6 7)
(seq-merge [1 5 7 9] [2 2 8 10]) ;=> (1 2 2 5 7 8 9 10)
(rld)
(merge-sort [4 2 3 1])
(rld)
(merge-sort [4 2 3 1])
(rld)
(merge-sort [4 2 3 1])
(merge-sort [5 6 3 6 2 0 10 14 13 11 16 18 17 4])
(merge-sort [])                 ;=> ()
(merge-sort [1 2 3])            ;=> (1 2 3)
(merge-sort [5 3 4 17 2 100 1]) ;=> (1 2 3 4 5 17 100)
(def a-str "mike")
a-str
(take 0 a-str)
(cons (take 1 a-str) (drop 1 a-str))
(cons (take 1 a-str) (drop 2 a-str))
(defn dropIndex [i a-str]
  (if (< i 0) ""
    (apply str (cons (take (- 1 i) a-str) (drop (+ 1 i) a-str)))))
(dropIndex 1 "mike")
(rld)
(use 'recursion)
(rld)
(dropIndex 1 "mike")
(rld)
(dropIndex 1 "mike")
(take 1 "mike")
(cons (take 1 "mike") (drop 2 "mike"))
(take 0 "mike")
(take 1 "mike")
(dropIndex 1 "mike")
(rld)
(dropIndex 1 "mike")
(dropIndex 0 "mike")
(rld)
(dropIndex 0 "mike")
(rdl)
(rld)
(dropIndex 0 "mike")
(dropIndex 1 "mike")
(rld)
(dropIndex 1 "mike")
(rld)
(dropIndex 1 "mike")
(dropIndex 2 "mike")
(dropIndex 4 "mike")
(dropIndex 3 "mike")
(dropIndex 0 "mike")
(rld)
(dropIndex 0 "mike")
(dropIndex 1 "mike")
(dropIndex 2 "mike")
(dropIndex 3 "mike")
