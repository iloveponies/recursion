(my-filter (fn [x] (> x 9000)) [12 49 90 9001]) ;=> (9001)
(my-filter even? [1 3 5 7]) ;=> ()
(use 'recursion :reload)
(my-filter odd? [1 2 3 4]) ;=> (1 3)
(my-filter (fn [x] (> x 9000)) [12 49 90 9001]) ;=> (9001)
(my-filter even? [1 3 5 7]) ;=> ()
(use 'recursion :reload)
(my-filter odd? [1 2 3 4]) ;=> (1 3)
(my-filter (fn [x] (> x 9000)) [12 49 90 9001]) ;=> (9001)
(use 'recursion)
(my-drop-while odd? [1 2 3 4])  ;=> (2 3 4)
(my-drop-while odd? [1 3 4 5])  ;=> (4 5)
(my-drop-while even? [1 3 4 5]) ;=> (1 3 4 5)
(my-drop-while odd? [])         ;=> ()
(use 'recursion)
(my-drop-while odd? [1 2 3 4])  ;=> (2 3 4)
(my-drop-while odd? [1 3 4 5])  ;=> (4 5)
(my-drop-while even? [1 3 4 5]) ;=> (1 3 4 5)
(my-drop-while odd? [])         ;=> ()
(use 'recursion :reload)
(my-drop-while odd? [1 2 3 4])  ;=> (2 3 4)
(my-drop-while odd? [1 3 4 5])  ;=> (4 5)
(my-drop-while even? [1 3 4 5]) ;=> (1 3 4 5)
(my-drop-while odd? [])         ;=> ()
(use 'recursion :reload)
(seq= [1 2 4] '(1 2 4))  ;=> true
(seq= [1 2 3] [1 2 3 4]) ;=> false
(seq= [1 3 5] [])        ;=> false
(use 'recursion :reload)
(seq= [1 2 4] '(1 2 4))  ;=> true
(seq= [1 2 3] [1 2 3 4]) ;=> false
(seq= [1 3 5] [])        ;=> false
(use 'recursion :reload)
      (println (str (first a-seq) " = " (first b-seq)))
(seq= [1 3 5] [])        ;=> false
(seq= [1 2 3] [1 2 3 4]) ;=> false
(use 'recursion :reload)
(seq= [1 2 nil] [1 2 nil])
(seq= [1 2 nil] [1 2])
(seq= [1 2 []] [1 2])
(use 'recursion :reload)
(seq= [1 2 []] [1 2])
(seq= [1 2 nil] [1 2])
(use 'recursion :reload)
(seq= [1 2 nil] [1 2])
(seq= [1 2 nil] [1 2 nil])
(seq= [1 3 5] [])        ;=> false
(empty? nil)
(empty? [nil])
(= [1 2 3] [1 2 3])
(= [1 2 3] [1 2])
(= [nil] [])
(not (empty? [1]))
(def a-seq [1 2])
(def b-seq [1 2])
 (or (and ((not (empty? a-seq)) (empty? b-seq)))
      (and ((empty? a-seq)) (not (empty? b-seq)))))
 (or (and ((not (empty? a-seq)) (empty? b-seq)))
      (and ((empty? a-seq)) (not (empty? b-seq))))
 (and ((not (empty? a-seq)) (empty? b-seq))
)
(empty? a-seq)
(empty? b-seq)
(and (not (empty? a-seq)) (empty? b-seq))
(use 'recursion :reload)
(seq= a-seq b-seq)
(def a-seq [1 2 nil])
(seq= a-seq b-seq)
(use 'recursion :reload)
(my-map + [1 2 3] [4 4 4])   ;=> (5 6 7)
(my-map + [1 2 3 4] [0 0 0]) ;=> (1 2 3)
(my-map + [1 2 3] [])        ;=> ()
(use 'recursion :reload)
(power 2 3)
(power 2 0)
(power 0 0)
expt
(expt 1 2)
(use 'clojure.math.numeric-tower)
(use 'clojure.math.*)
exp
pow
math.pow
(abs -1)
(.abs -1)
(def a = "a")
(def a "a")
(+ a 1)
a
(defn givenan [n]
)
(defn jaa [n d]
(if (zero? d) Double/NaN
(/ n d))
)
jaa
(jaa 1 2)
(jaa 1 0)
(defn palautaNaN
NaN)
(use 'recursion :reload)
(power 1 2)
(power 2 3)
(power 0 1)
(power 0 0)
(power 1 0)
(power 2 0)
(use 'recursion :reload)
(power 1 0)
(power 0 0)
(power 2 3)
(power 0 10)
(power 0 0)
(power 1 0)
(power 222 0)
(use 'recursion :reload)
(fib 0) ;=> 0
(fib 1) ;=> 1
(fib 2) ;=> 1
(fib 3) ;=> 2
(fib 4) ;=> 3
(fib 5) ;=> 5
(fib 6) ;=> 8
...
(fib 10) ;=> 55
(fib 10)
(fib -1)
(fib 1.1)
(fib 2/7)
(use 'recursion :reload)
(my-repeat 2 "lol")
(my-repeat 1 "lol")
(my-repeat 1 2)
(use 'recursion :reload)
(my-repeat 1 2)
(my-repeat 1 "lol")
(cons 1 2)
(cons set 1)
(set 1)
seq
(seq 1)
(conj 1 2)
(conj 1 ())
(conj 1 '())
(cons 1 '())
(cons '1 2)
(cons '1 '2)
(cons (seq 1) 2)
(cons (seq 1))
(seq 1)
(seq 1 ())
(cons 1 ())
(use 'recursion :reload)
(my-repeat 3 "l")
(cons 1 (lazy-seq (2)))
(cons 1 (lazy-seq 2))
(conj 1 (seq 2))
(conj 1 2)
seq
(seq 1)
(cons 1 ())
(cons 2 (cons 1 ()))
(cons (2 ()))
(cons 2 (cons 1 ())
)
(use 'recursion :reload)
(my-repeat 3 "lol")
(cons (2 ()) (1 ()))
(cons 2 (1 ()))
(use 'recursion :reload)
(cons 2 (1 ()))
(my-repeat 3 "lol")
(use 'recursion :reload)
my-repeat
(my-repeat 3 "lol")
(use 'recursion :reload)
(my-repeat 3 "lol")
(cons 1 ())
(my-repeat 0 "lol")
(dec 1)
(cons "lol" ())
(use 'recursion :reload)
(my-repeat 0 "lol")
(my-repeat 3 "lol")
(use 'recursion :reload)
(my-repeat 3 "lol")
(use 'recursion :reload)
(my-repeat 3 "lol")
(my-repeat 0 "lol")
(use 'recursion :reload)
(my-repeat 0 "lol")
(my-repeat 3 "lol")
(use 'recursion :reload)
(my-repeat 3 "lol")
(use 'recursion :reload)
(my-filter odd [1 2 3 4])
(my-filter odd? [1 2 3 4])
(use 'recursion :reload)
(my-filter odd? [1 2 3 4])
(use 'recursion :reload)
(my-filter odd? [1 2 3 4])
(use 'recursion :reload)
(my-filter odd? [1 2 3 4])
(use 'recursion :reload)
(my-filter odd? [1 2 3 4])
(use 'recursion :reload)
(my-range 0)
(my-range 1)
(use 'recursion :reload)
(my-range 1)
(my-range 0)
(use 'recursion :reload)
(tails [1 2 3 4])
(use 'recursion :reload)
(tails [1 2 3 4])
(use 'recursion :reload)
(tails [1 2 3 4])
(use 'recursion :reload)
(tails [1 2 3 4])
(use 'recursion :reload)
(tails [1 2 3 4])
(use 'recursion :reload)
(tails [1 2 3 4])
(vector [1 2 3 4])
(seq [1 2 3 4])
(vector [1 2 3 4])
(use 'recursion :reload)
(tails [1 2 3 4])
(use 'recursion :reload)
(tails [1 2 3 4])
(use 'recursion :reload)
(tails [1 2 3 4])
(use 'recursion :reload)
(tails [1 2 3 4])
(cons () ())
(cons ((1)) ())
(cons () (1))
(cons ((1)) ())
(cons () ((1)))
(cons '() ((1)))
((1))
(cons 1 ())
(cons () (1))
(cons () '())
(use 'recursion :reload)
(tails [1 2 3 4])
(use 'recursion :reload)
(tails [1 2 3 4])
(use 'recursion :reload)
(tails [1 2 3 4])
(inits [1 2 3 4])
(tails [1 2 3 4])
(inits [1 2 3 4])
(use 'recursion :reload)
(inits [1 2 3 4])
(tails [1 2 3 4])
(use 'recursion :reload)
(rotations [1 2 3])
(rotations [])
(use 'recursion :reload)
(rotations [])
(rotations [1 2 3])
(use 'recursion :reload)
(rotations [1 2 3])
(rotations [])
(rotations [1])
(tails [1 2 3])
(inits [1 2 3]=
)
(tails [1 2 3])
(inits [1 2 3])
(use 'recursion)
(rotations [])
(rotations [1 2 3])
(use 'recursion)
(use 'recursion :reload)
(my-frequencies [])
(use 'recursion :reload)
(my-frequencies []) ;=> {}
(my-frequencies [:a "moi" :a "moi" "moi" :a 1]) ;=> {:a 3, "moi" 3, 1 1}
(def hm {})
(hm)
(assoc hm "a" 1)
(hm)
(println hm)
(hm "a")
("a" hm)
(def hm {"a" 1})
(hm)
("a" hm)
(get hm "a")
(put hm "b" 2)
(assoc hm "b" 2)
(get hm "b")
(get hm "a")
(get hm "c")
(get {} 1)
(use 'recursion :reload)
(my-frequencies [:a "moi" :a "moi" "moi" :a 1]) ;=> {:a 3, "moi" 3, 1 1}
(my-frequencies []) ;=> {}
(use 'recursion :reload)
(my-frequencies []) ;=> {}
(my-frequencies [:a "moi" :a "moi" "moi" :a 1]) ;=> {:a 3, "moi" 3, 1 1}
(assoc {} (first [:a "moi"]) 1)
(empty? [:a "moi])
")
(empty? [:a "moi])
)
)))
")
(empty? [:a "moi"])
(use 'recursion :reload)
(my-frequencies [:a "moi" :a "moi" "moi" :a 1]) ;=> {:a 3, "moi" 3, 1 1}
(use 'recursion :reload)
(un-frequencies {:a 3 :b 2 "^_^" 1})
(use 'recursion :reload)
(un-frequencies {:a 3 :b 2 "^_^" 1})
(def a-map {:a 3 :b 2 "^_^" 1})
(get a-map (first a-map))
(use 'recursion :reload)
(un-frequencies {:a 3 :b 2 "^_^" 1})
(a-map (first a-map))
(get {:a 3 :b 2} (first {:a 3 :b 2}))
(first {:a 3 :b 2})
(get (first {:a 3 :b 2}))
(first (first {:a 3 :b 2}))
(rest (first {:a 3 :b 2}))
(* 2 (rest (first {:a 3 :b 2})))
(use 'recursion :reload)
(un-frequencies {:a 3 :b 2 "^_^" 1})
(use 'recursion :reload)
(un-frequencies {:a 3 :b 2 "^_^" 1})
(un-frequencies {})
(a-map)
(a-map :a)
(a-map (first (first a-map)))
(first (first a-map))
(repeat (a-map (first (first a-map))) (first (first a-map)))
(concat (:a) (:b))
(cons (:a) (:b))
(concat (seq (:a)) (seq (:b)))
(concat ('(:a)) (' (:b)))
(concat (:a) ' (:b))
(concat (:a) (:b))
(concat :a (:b))
(concat :a :b)
(conj (1) (2))
(conj 1 ())
(conj () 1)
(conj (1) 2)
(conj '(1) (2))
(conj '(1) '(2))
(repeat (a-map (first (first a-map))) (first (first a-map)))
(def b '(1 2 3))
(b)
(seq b)
(list (1 2 3))
(concat '(1) '(2) '(3))
(use 'recursion :reload)
(un-frequencies {:a 3 :b 2 "^_^" 1})
(flatten (1) (2))
(un-frequencies {:a 3 :b 2 "^_^" 1})
(use 'recursion :reload)
(un-frequencies {:a 3 :b 2 "^_^" 1})
(use 'recursion :reload)
(un-frequencies {:a 3 :b 2 "^_^" 1})
(use 'recursion :reload)
(un-frequencies {:a 3 :b 2 "^_^" 1})
(use 'recursion :reload)
(my-take 2 [1 2 3 4]) ;=> (1 2)
(my-take 4 [:a :b])   ;=> (:a :b)
(use 'recursion :reload)
(my-take 2 [1 2 3 4]) ;=> (1 2)
(my-take 4 [:a :b])   ;=> (:a :b)
(use 'recursion :reload)
(my-take 4 [:a :b])   ;=> (:a :b)
(def a [:a :b])
(concat (first a) (rest a))
(dec 2)
(use 'recursion :reload)
(my-take 4 [:a :b])   ;=> (:a :b)
(use 'recursion :reload)
(my-take 4 [:a :b])   ;=> (:a :b)
(use 'recursion :reload)
(my-take 4 [:a :b])   ;=> (:a :b)
(use 'recursion :reload)
(my-drop 2 [1 2 3 4 5])
(use 'recursion)
(use 'recursion :reload)
(un-frequencies)
(un-frequencies (un-frequencies (my-frequencies [:a :b :c :a])))
(use 'recursion :reload)
(un-frequencies (un-frequencies (my-frequencies [:a :b :c :a])))
(def a-map {:a 3 :b 2 "^_^" 1})
a-map
(empty? a-map)
(a-map (first (first a-map)))
(concat (take (a-map (first (first a-map))) ())
)
(use 'recursion :reload)
(un-frequencies (un-frequencies (my-frequencies [:a :b :c :a])))
(apply concat (repeat (first (first a-map))))
(apply cons (repeat (first (first a-map))))
(apply conj (repeat (first (first a-map))))
(apply concat (repeat (first (first a-map))))
(apply conj (repeat (first (first a-map))))
(concat (repeat (first (first a-map))))
(repeat (first (first a-map)))
(first (first a-map))
(take (a-map (first (first a-map))))
(a-map (first (first a-map)))
(take (a-map (first (first a-map)))
        (apply concat (repeat (first (first a-map)))))
(take (a-map (first (first a-map)))
      (take (a-map (first (first a-map))) (apply concat (repeat (first (first a-map)))))
      (take (a-map (first (first a-map))) (cons (repeat (first (first a-map)))))
      (take (a-map (first (first a-map))) (cons '() (repeat (first (first a-map)))))
      (take (a-map (first (first a-map))) (cons () (repeat (first (first a-map)))))
      (take (a-map (first (first a-map))) (cons (repeat (first (first a-map)))))
      (take (a-map (first (first a-map))) (repeat (first (first a-map))))
(use 'recursion :reload)
(un-frequencies (un-frequencies (my-frequencies [:a :b :c :a])))
      (take (a-map (first (first a-map))) (repeat (first (first a-map))))
(concat (take (a-map (first (first a-map))) (repeat (first (first a-map)))) '(1 1 1))
(use 'recursion :reload)
(un-frequencies (un-frequencies (my-frequencies [:a :b :c :a])))
(concat (take (a-map (first (first a-map))) (repeat (first (first a-map)))) (seq (1 1 1)))
(concat (take (a-map (first (first a-map))) (repeat (first (first a-map)))) (map (1 1 1)))
(concat (take (a-map (first (first a-map))) (repeat (first (first a-map)))) '(1 1 1))
(cons (take (a-map (first (first a-map))) (repeat (first (first a-map)))) '(1 1 1))
(use 'recursion :reload)
(un-frequencies (un-frequencies (my-frequencies [:a :b :c :a])))
(concat (take (a-map (first (first a-map))) (repeat (first (first a-map)))) '(1 1 1))
(use 'recursion :reload)
(un-frequencies (un-frequencies (my-frequencies [:a :b :c :a])))
(use 'recursion :reload)
(concat (take (a-map (first (first a-map))) (repeat (first (first a-map)))) '(1 1 1))
(seq [1 2 3])
(use 'recursion :reload)
(un-frequencies (un-frequencies (my-frequencies [:a :b :c :a])))
(concat (take (a-map (first (first a-map))) (repeat (first (first a-map)))) '(1 1 1))
(concat (take (a-map (first (first a-map))) (repeat (first (first a-map)))) ())
(un-frequencies (un-frequencies (my-frequencies [:a :b :c :a])))
(use 'recursion :reload)
(un-frequencies (un-frequencies (my-frequencies [:a :b :c :a])))
(use 'recursion :reload)
(un-frequencies (un-frequencies (my-frequencies [:a :b :c :a])))
(seq ())
(seq)
(seq 1)
'()
'(1 1)
(concat '(1 1) '(2 2))
(use 'recursion :reload)
(un-frequencies (un-frequencies (my-frequencies [:a :b :c :a])))
(use 'recursion :reload)
(un-frequencies (un-frequencies (my-frequencies [:a :b :c :a])))
(concat '(1 1) ())
(concat () '(1 1))
(concat' () '(1 1))
(concat '() '(1 1))
(my-frequencies [:a :b :c :a])
(def a-map (my-frequencies [:a :b :c :a]))
(a-map)
a-map
(rest a-map)
(first a-map)
a-map
(concat (take (a-map (first (first a-map))) (repeat (first (first a-map)))) ())
(concat (take (a-map (first (first a-map))) (repeat (first (first a-map)))) (rest a-map))
(un-frequencies (un-frequencies (my-frequencies [:a :b :c :a])))
(use 'recursion :reload)
(un-frequencies (un-frequencies (my-frequencies [:a :b :c :a])))
(use 'recursion :reload)
(un-frequencies (un-frequencies (my-frequencies [:a :b :c :a])))
(use 'recursion :reload)
(un-frequencies (un-frequencies (my-frequencies [:a :b :c :a])))
(un-frequencies {:a 3 :b 2 "^_^" 1}) 
a-map
(rest a-map)
(apply hashmap (rest a-map))
(remove (first a-map) a-map)
(remove :a a-map)
(use 'recursion :reload)
(un-frequencies {:a 3 :b 2 "^_^" 1}) 
(let first-key [(first (first a-map))])
(let first-key [(first (first a-map)) (println first-key)])
(let first-key [(first (first a-map))] (println first-key))
(let first-key [(first (first a-map))])
(let [first-key (first (first a-map))] (println first-key))
(let [first-key (first (first a-map))] first-key)
(defn un-frequencies [a-map]
  (if (empty? a-map)
    '()
    (concat 
      (let [first-key (first (first a-map))]
      (take (a-map (first (first a-map))) (repeat (first (first a-map))))
      (un-frequencies (dissoc a-map (first (first a-map))))))))
(use 'recursion :reload)
(un-frequencies {:a 3 :b 2 "^_^" 1}) 
