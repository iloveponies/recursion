(tails [1 2 3 4])
(use 'recursion :reload)
(tails [1 2 3 4])
(cons () ())
(cons ((1)) ())
(cons () (1))
(cons ((1)) ())
(cons () ((1)))
(cons '() ((1)))
((1))
(cons 1 ())
(cons () (1))
(cons () '())
(use 'recursion :reload)
(tails [1 2 3 4])
(use 'recursion :reload)
(tails [1 2 3 4])
(use 'recursion :reload)
(tails [1 2 3 4])
(inits [1 2 3 4])
(tails [1 2 3 4])
(inits [1 2 3 4])
(use 'recursion :reload)
(inits [1 2 3 4])
(tails [1 2 3 4])
(use 'recursion :reload)
(rotations [1 2 3])
(rotations [])
(use 'recursion :reload)
(rotations [])
(rotations [1 2 3])
(use 'recursion :reload)
(rotations [1 2 3])
(rotations [])
(rotations [1])
(tails [1 2 3])
(inits [1 2 3]=
)
(tails [1 2 3])
(inits [1 2 3])
(use 'recursion)
(rotations [])
(rotations [1 2 3])
(use 'recursion)
(use 'recursion :reload)
(my-frequencies [])
(use 'recursion :reload)
(my-frequencies []) ;=> {}
(my-frequencies [:a "moi" :a "moi" "moi" :a 1]) ;=> {:a 3, "moi" 3, 1 1}
(def hm {})
(hm)
(assoc hm "a" 1)
(hm)
(println hm)
(hm "a")
("a" hm)
(def hm {"a" 1})
(hm)
("a" hm)
(get hm "a")
(put hm "b" 2)
(assoc hm "b" 2)
(get hm "b")
(get hm "a")
(get hm "c")
(get {} 1)
(use 'recursion :reload)
(my-frequencies [:a "moi" :a "moi" "moi" :a 1]) ;=> {:a 3, "moi" 3, 1 1}
(my-frequencies []) ;=> {}
(use 'recursion :reload)
(my-frequencies []) ;=> {}
(my-frequencies [:a "moi" :a "moi" "moi" :a 1]) ;=> {:a 3, "moi" 3, 1 1}
(assoc {} (first [:a "moi"]) 1)
(empty? [:a "moi])
")
(empty? [:a "moi])
)
)))
")
(empty? [:a "moi"])
(use 'recursion :reload)
(my-frequencies [:a "moi" :a "moi" "moi" :a 1]) ;=> {:a 3, "moi" 3, 1 1}
(use 'recursion :reload)
(un-frequencies {:a 3 :b 2 "^_^" 1})
(use 'recursion :reload)
(un-frequencies {:a 3 :b 2 "^_^" 1})
(def a-map {:a 3 :b 2 "^_^" 1})
(get a-map (first a-map))
(use 'recursion :reload)
(un-frequencies {:a 3 :b 2 "^_^" 1})
(a-map (first a-map))
(get {:a 3 :b 2} (first {:a 3 :b 2}))
(first {:a 3 :b 2})
(get (first {:a 3 :b 2}))
(first (first {:a 3 :b 2}))
(rest (first {:a 3 :b 2}))
(* 2 (rest (first {:a 3 :b 2})))
(use 'recursion :reload)
(un-frequencies {:a 3 :b 2 "^_^" 1})
(use 'recursion :reload)
(un-frequencies {:a 3 :b 2 "^_^" 1})
(un-frequencies {})
(a-map)
(a-map :a)
(a-map (first (first a-map)))
(first (first a-map))
(repeat (a-map (first (first a-map))) (first (first a-map)))
(concat (:a) (:b))
(cons (:a) (:b))
(concat (seq (:a)) (seq (:b)))
(concat ('(:a)) (' (:b)))
(concat (:a) ' (:b))
(concat (:a) (:b))
(concat :a (:b))
(concat :a :b)
(conj (1) (2))
(conj 1 ())
(conj () 1)
(conj (1) 2)
(conj '(1) (2))
(conj '(1) '(2))
(repeat (a-map (first (first a-map))) (first (first a-map)))
(def b '(1 2 3))
(b)
(seq b)
(list (1 2 3))
(concat '(1) '(2) '(3))
(use 'recursion :reload)
(un-frequencies {:a 3 :b 2 "^_^" 1})
(flatten (1) (2))
(un-frequencies {:a 3 :b 2 "^_^" 1})
(use 'recursion :reload)
(un-frequencies {:a 3 :b 2 "^_^" 1})
(use 'recursion :reload)
(un-frequencies {:a 3 :b 2 "^_^" 1})
(use 'recursion :reload)
(un-frequencies {:a 3 :b 2 "^_^" 1})
(use 'recursion :reload)
(my-take 2 [1 2 3 4]) ;=> (1 2)
(my-take 4 [:a :b])   ;=> (:a :b)
(use 'recursion :reload)
(my-take 2 [1 2 3 4]) ;=> (1 2)
(my-take 4 [:a :b])   ;=> (:a :b)
(use 'recursion :reload)
(my-take 4 [:a :b])   ;=> (:a :b)
(def a [:a :b])
(concat (first a) (rest a))
(dec 2)
(use 'recursion :reload)
(my-take 4 [:a :b])   ;=> (:a :b)
(use 'recursion :reload)
(my-take 4 [:a :b])   ;=> (:a :b)
(use 'recursion :reload)
(my-take 4 [:a :b])   ;=> (:a :b)
(use 'recursion :reload)
(my-drop 2 [1 2 3 4 5])
(use 'recursion)
(use 'recursion :reload)
(un-frequencies)
(un-frequencies (un-frequencies (my-frequencies [:a :b :c :a])))
(use 'recursion :reload)
(un-frequencies (un-frequencies (my-frequencies [:a :b :c :a])))
(def a-map {:a 3 :b 2 "^_^" 1})
a-map
(empty? a-map)
(a-map (first (first a-map)))
(concat (take (a-map (first (first a-map))) ())
)
(use 'recursion :reload)
(un-frequencies (un-frequencies (my-frequencies [:a :b :c :a])))
(apply concat (repeat (first (first a-map))))
(apply cons (repeat (first (first a-map))))
(apply conj (repeat (first (first a-map))))
(apply concat (repeat (first (first a-map))))
(apply conj (repeat (first (first a-map))))
(concat (repeat (first (first a-map))))
(repeat (first (first a-map)))
(first (first a-map))
(take (a-map (first (first a-map))))
(a-map (first (first a-map)))
(take (a-map (first (first a-map)))
        (apply concat (repeat (first (first a-map)))))
(take (a-map (first (first a-map)))
      (take (a-map (first (first a-map))) (apply concat (repeat (first (first a-map)))))
      (take (a-map (first (first a-map))) (cons (repeat (first (first a-map)))))
      (take (a-map (first (first a-map))) (cons '() (repeat (first (first a-map)))))
      (take (a-map (first (first a-map))) (cons () (repeat (first (first a-map)))))
      (take (a-map (first (first a-map))) (cons (repeat (first (first a-map)))))
      (take (a-map (first (first a-map))) (repeat (first (first a-map))))
(use 'recursion :reload)
(un-frequencies (un-frequencies (my-frequencies [:a :b :c :a])))
      (take (a-map (first (first a-map))) (repeat (first (first a-map))))
(concat (take (a-map (first (first a-map))) (repeat (first (first a-map)))) '(1 1 1))
(use 'recursion :reload)
(un-frequencies (un-frequencies (my-frequencies [:a :b :c :a])))
(concat (take (a-map (first (first a-map))) (repeat (first (first a-map)))) (seq (1 1 1)))
(concat (take (a-map (first (first a-map))) (repeat (first (first a-map)))) (map (1 1 1)))
(concat (take (a-map (first (first a-map))) (repeat (first (first a-map)))) '(1 1 1))
(cons (take (a-map (first (first a-map))) (repeat (first (first a-map)))) '(1 1 1))
(use 'recursion :reload)
(un-frequencies (un-frequencies (my-frequencies [:a :b :c :a])))
(concat (take (a-map (first (first a-map))) (repeat (first (first a-map)))) '(1 1 1))
(use 'recursion :reload)
(un-frequencies (un-frequencies (my-frequencies [:a :b :c :a])))
(use 'recursion :reload)
(concat (take (a-map (first (first a-map))) (repeat (first (first a-map)))) '(1 1 1))
(seq [1 2 3])
(use 'recursion :reload)
(un-frequencies (un-frequencies (my-frequencies [:a :b :c :a])))
(concat (take (a-map (first (first a-map))) (repeat (first (first a-map)))) '(1 1 1))
(concat (take (a-map (first (first a-map))) (repeat (first (first a-map)))) ())
(un-frequencies (un-frequencies (my-frequencies [:a :b :c :a])))
(use 'recursion :reload)
(un-frequencies (un-frequencies (my-frequencies [:a :b :c :a])))
(use 'recursion :reload)
(un-frequencies (un-frequencies (my-frequencies [:a :b :c :a])))
(seq ())
(seq)
(seq 1)
'()
'(1 1)
(concat '(1 1) '(2 2))
(use 'recursion :reload)
(un-frequencies (un-frequencies (my-frequencies [:a :b :c :a])))
(use 'recursion :reload)
(un-frequencies (un-frequencies (my-frequencies [:a :b :c :a])))
(concat '(1 1) ())
(concat () '(1 1))
(concat' () '(1 1))
(concat '() '(1 1))
(my-frequencies [:a :b :c :a])
(def a-map (my-frequencies [:a :b :c :a]))
(a-map)
a-map
(rest a-map)
(first a-map)
a-map
(concat (take (a-map (first (first a-map))) (repeat (first (first a-map)))) ())
(concat (take (a-map (first (first a-map))) (repeat (first (first a-map)))) (rest a-map))
(un-frequencies (un-frequencies (my-frequencies [:a :b :c :a])))
(use 'recursion :reload)
(un-frequencies (un-frequencies (my-frequencies [:a :b :c :a])))
(use 'recursion :reload)
(un-frequencies (un-frequencies (my-frequencies [:a :b :c :a])))
(use 'recursion :reload)
(un-frequencies (un-frequencies (my-frequencies [:a :b :c :a])))
(un-frequencies {:a 3 :b 2 "^_^" 1}) 
a-map
(rest a-map)
(apply hashmap (rest a-map))
(remove (first a-map) a-map)
(remove :a a-map)
(use 'recursion :reload)
(un-frequencies {:a 3 :b 2 "^_^" 1}) 
(let first-key [(first (first a-map))])
(let first-key [(first (first a-map)) (println first-key)])
(let first-key [(first (first a-map))] (println first-key))
(let first-key [(first (first a-map))])
(let [first-key (first (first a-map))] (println first-key))
(let [first-key (first (first a-map))] first-key)
(defn un-frequencies [a-map]
  (if (empty? a-map)
    '()
    (concat 
      (let [first-key (first (first a-map))]
      (take (a-map (first (first a-map))) (repeat (first (first a-map))))
      (un-frequencies (dissoc a-map (first (first a-map))))))))
(use 'recursion :reload)
(un-frequencies {:a 3 :b 2 "^_^" 1}) 
(concat [1 2] [3 4])
(conj [1 2] [3 4])
(cons [1 2] [3 4])
(cons '(1 2) '(3 4))
(concat '(1 2) '(3 4))
(conj '(1 2) '(3 4))
(vector (conj '(1 2) '(3 4)))
(conj (vector '(1 2)) (vector '(3 4)))
(conj (vector '(1 2)) '(3 4))
(use 'recursion :reload)
(halve [1 2 3 4])   ;=> [(1 2) (3 4)]
(halve [1 2 3 4 5]) ;=> [(1 2) (3 4 5)]
(halve [1])         ;=> [() (1)]
(use 'recursion :reload)
(halve [1 2 3 4])   ;=> [(1 2) (3 4)]
(halve [1 2 3 4 5]) ;=> [(1 2) (3 4 5)]
(halve [1])         ;=> [() (1)]
(use 'recursion :reload)
(halve [1 2 3 4])   ;=> [(1 2) (3 4)]
(halve [1 2 3 4 5]) ;=> [(1 2) (3 4 5)]
(halve [1])         ;=> [() (1)]
(my-drop 2 [1 2 3 4 5])
(def a-seq [1 2 3 4 5])
a-seq
(my-drop (/ (count a-seq) 2) a-seq)
(my-drop 2 a-seq)
(count a-seq)
(/ (count a-seq) 2)
(use 'recursion :reload)
(halve [1 2 3 4])   ;=> [(1 2) (3 4)]
(halve [1 2 3 4 5]) ;=> [(1 2) (3 4 5)]
(halve [1])         ;=> [() (1)]
(use 'recursion :reload)
(halve [1 2 3 4])   ;=> [(1 2) (3 4)]
(halve [1 2 3 4 5]) ;=> [(1 2) (3 4 5)]
(halve [1])         ;=> [() (1)]
(use 'recursion :reload)
(halve [1 2 3 4])   ;=> [(1 2) (3 4)]
(halve [1 2 3 4 5]) ;=> [(1 2) (3 4 5)]
(halve [1])         ;=> [() (1)]
(conj [1 2] [3 4])
(concat [1 2] [3 4])
(concat [1 4] [2 3])
(use 'recursion :reload)
(halve [1])
(inits [1 2 3 4]) ;=> (() (1) (1 2) (1 2 3) (1 2 3 4))
(use 'recursion :reload)
(tails [1 2 3 4]) ;=> ((1 2 3 4) (2 3 4) (3 4) (4) ())
(inits [1 2 3 4]) ;=> (() (1) (1 2) (1 2 3) (1 2 3 4))
; You can output the tails and inits in any order you like.
(inits [1 2 3 4]) ;=> ((1 2) () (1 2 3) (1) (1 2 3 4))
(tails (reverse [1 2 3 4]))
(reverse (inits [1 2 3 4]))
(use 'recursion :reload)
(reverse (inits [1 2 3 4]))
(inits [1 2 3 4])
(use 'recursion :reload)
(inits [1 2 3 4])
(reverse (inits [1 2 3 4]))
(use 'recursion)
(use 'recursion :reload)
(a-seq [0 1 2 1 0])
(def a-seq [0 1 2 1 0])
a-seq
(# (< (first a-seq) (first (rest a-seq))))
(# (< (first a-seq) (first (res))))
(map (< (first a-seq) (first (rest a-seq))) a-seq)
(take-while (< (first a-seq) (first (rest a-seq))) a-seq)
(my-take-while (< (first a-seq) (first (rest a-seq))) a-seq)
(my-take-while #(< (first a-seq) (first (rest a-seq))) a-seq)
(my-take-while (#(< (first a-seq) (first (rest a-seq)))) a-seq)
(my-take-while (< (first a-seq) (first (rest a-seq))) a-seq)
(my-take-while (# (if (< (first a-seq) (first (rest a-seq))) first a-seq ())))
(my-take-while (# (if (< (first a-seq) (first (rest a-seq))) (first a-seq) ())))
(conj '(1 2) '(1 2))
(conj (vector '(1 2)) '(1 2))
(cons (vector '(1 2)) '(1 2))
(cons '(1 2) '(1 2))
(cons '(1 2) (1 2))
(cons '(1 2) '(1 2))
(cons (seq '(1 2)) '(1 2))
(cons (seq '(1 2)) '(3 4))
(cons (seq '(1 2)) (seq('(3 4)))
)
(cons (seq '(1 2)) (seq('(3 4))))
(cons (seq '(1 2)) (seq ('(3 4))))
(cons '(1 2) (seq ('(3 4))))
(my-take 2 a-seq)
(my-take-while (fn [x] (> x (first (rest a-seq)))) a-seq)
a-seq
(my-take-while (map (> x (first (rest a-seq)))) a-seq)
(my-take-while (filter (> x (first (rest a-seq)))) a-seq)
(defn monotonic-sort? [a-seq] (> (first a-seq) (first (rest a-seq))))
(my-take-while (monotonic-sort? a-seq) a-seq)
(use 'recursion)
(seq-merge [4] [1 2 6 7])
(seq-merge [1 5 7 9] [2 2 8 10]) ;=> (1 2 2 5 7 8 9 10)
(use 'recursion :reload)
(merge-sort [])                 ;=> ()
(merge-sort [1 2 3])            ;=> (1 2 3)
(merge-sort [5 3 4 17 2 100 1])
(inits [1 2 3 4])
(reverse (inits [1 2 3 4]))
(def a-seq [1 2 3 3])
a-seq
(use 'recursion :reload)
(split-into-monotonics [0 1 2 1 0])   ;=> ((0 1 2) (1 0))
(split-into-monotonics [0 5 4 7 1 3]) ;=> ((0 5) (4 7) (1 3))
(use 'recursion :reload)
(split-into-monotonics [0 1 2 1 0])   ;=> ((0 1 2) (1 0))
(split-into-monotonics [0 5 4 7 1 3]) ;=> ((0 5) (4 7) (1 3))
(use 'recursion :reload)
(split-into-monotonics [0 5 4 7 1 3]) ;=> ((0 5) (4 7) (1 3))
(use 'recursion :reload)
(split-into-monotonics [0 5 4 7 1 3]) ;=> ((0 5) (4 7) (1 3))
(use 'recursion :reload)
(split-into-monotonics [0 5 4 7 1 3]) ;=> ((0 5) (4 7) (1 3))
(use 'recursion :reload)
(split-into-monotonics [0 5 4 7 1 3]) ;=> ((0 5) (4 7) (1 3))
(use 'recursion :reload)
(split-into-monotonics [0 5 4 7 1 3]) ;=> ((0 5) (4 7) (1 3))
(def a-seq [0 5 4 7 1 3])
      (my-take-while (fn [x] (> (second x) (first x)) a-seq) a-seq)
(my-take-while (fn [x] (> (second x) (first x)) a-seq) a-seq)
a-seq
(defn monotonic [a-seq] (> (second a-seq) (first a-seq)))
(monotonic a-seq)
(my-take-while (monotonic a-seq) a-seq)
(use 'recursion :reload)
(split-into-monotonics [0 5 4 7 1 3]) ;=> ((0 5) (4 7) (1 3))
quit
(use 'recursion :reload)
(split-into-monotonics [0 5 4 7 1 3]) ;=> ((0 5) (4 7) (1 3))
(use 'recursion :reload)
(split-into-monotonics [0 5 4 7 1 3]) ;=> ((0 5) (4 7) (1 3))
(drop 5 '(1 2 3 4 5 6))
'(1 2 3)
(let [mono-seq
          (take-while (< (first a-seq) (next a-seq)) a-seq)]
)
(def mono-seq [a-seq] (take-while (< (first a-seq) (next a-seq)) a-seq))
(defn mono-seq [a-seq] (take-while (< (first a-seq) (next a-seq)) a-seq))
(def a-seq [0 1 2 1 2 3])
a-seq
(mono-seq a-seq)
(next a-seq)
(use 'recursion :reload)
(split-into-monotonics [0 5 4 7 1 3]) ;=> ((0 5) (4 7) (1 3))
(use 'recursion :reload)
(split-into-monotonics [0 5 4 7 1 3]) ;=> ((0 5) (4 7) (1 3))
(use 'recursion :reload)
(split-into-monotonics [0 5 4 7 1 3]) ;=> ((0 5) (4 7) (1 3))
(use 'recursion :reload)
(split-into-monotonics [0 5 4 7 1 3]) ;=> ((0 5) (4 7) (1 3))
a-seq
(conj '() (take-while 3 a-seq))
(conj '() (take 3 a-seq))
(conj '() (take-while (fn [x] (< (first a-seq) (first (next a-seq))))))
(conj '() (take-while (fn [x] (< (first a-seq) (first (next a-seq)))) a-seq))
(conj '() (take-while (fn [x] (< (first a-seq) (first (rest a-seq)))) a-seq))
(take-while #(< (first %1) (first (next %1))))
(take-while #(< (first %1) (first (next %1))) a-seq)
(conj '() (take-while #(< (first %1) (first (next %1))) a-seq))
(use 'recursion :reload)
(monotonic? a-seq)
(def b-seq '(2 1 2 3))
(monotonic? b-seq)
(use 'recursion :reload)
(split-into-monotonics a-seq)
(monotonic (rest b-seq)
)
(monotonic? (rest b-seq))
(split-into-monotonics a-seq)
(split-into-monotonics b-seq)
(use 'recursion :reload)
(split-into-monotonics a-seq)
(take-while? monotonic? a-seq)
(take-while monotonic? a-seq)
(conj '() (take-while monotonic? a-seq))
(take-while pos? a-seq)
a-seq
(take-while zero? a-seq)
(use 'recursion :reload)
(take-while monotonic? a-seq)
(split-into-monotonics a-seq)
(monotonic? a-seq)
(use 'recursion :reload)
(split-into-monotonics a-seq)
(use 'recursion :reload)
(split-into-monotonics a-seq)
(use 'recursion :reload)
(monotonic-counter 0 (first a-seq) a-seq)
a-seq
(use 'recursion :reload)
(monotonic-counter 0 (first a-seq) a-seq)
(monotonic-counter 0 (first a-seq) (rest a-seq))
(use 'recursion :reload)
(monotonic-counter 0 (first a-seq) (rest a-seq))
(monotonic-counter 1 (first a-seq) (rest a-seq))
(use 'recursion :reload)
(monotonic-counter 1 (first a-seq) (rest a-seq))
(split-into-monotonics a-seq)
(take (monotonic-counter 1 (first a-seq) a-seq) a-seq)
(take (monotonic-counter 1 (first a-seq) (rest a-seq)) a-seq)
(use 'recursion :reload)
(split-into-monotonics a-seq)
(split-into-monotonics [1 2 3 4])
(use 'recursion :reload)
(split-into-monotonics [1 2 3 4])
(use 'recursion :reload)
(split-into-monotonics [1 2 3 4])
(monotonic-counter > 1 (first a-seq) (rest a-seq))
(monotonic-counter pos? 1 (first a-seq) (rest a-seq))
(monotonic-counter (pos?) 1 (first a-seq) (rest a-seq))
(use 'recursion :reload)
(split-into-monotonics [1 2 3 4])
(use 'recursion :reload)
(split-into-monotonics [1 2 3 4])
(use 'recursion :reload)
(split-into-monotonics [1 2 3 4])
(use 'recursion :reload)
(split-into-monotonics [1 2 3 4])
(use 'recursion :reload)
(split-into-monotonics [1 2 3 4])
(use 'recursion :reload)
(split-into-monotonics [1 2 3 4])
(split-into-monotonics [1 2 1 3 4])
(split-into-monotonics [])
(split-into-monotonics [1])
(split-into-monotonics [1 1 1])
(split-into-monotonics [1 1 1 2 3 2 1 0])
